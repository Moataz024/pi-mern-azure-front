{"version":3,"file":"static/js/647.be2fd85d.chunk.js","mappings":"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","sources":["webpack://liga-soccer/./src/widgets/TournamentWidgets/AddingTeams/AddTeamsWidget.module.css?5b11","widgets/TournamentWidgets/AddingTeams/AddTeamsWidget.jsx","pages/Tournament/AddTeams.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AddTeamsWidget_container__D3sxc\",\"teamsContainer\":\"AddTeamsWidget_teamsContainer__spj28\",\"dropContainer\":\"AddTeamsWidget_dropContainer__W9p1b\",\"teamContainer\":\"AddTeamsWidget_teamContainer__BLnyv\",\"teamLogo\":\"AddTeamsWidget_teamLogo__FIHOY\",\"teamName\":\"AddTeamsWidget_teamName__F+jNS\",\"selectedTeamsContainer\":\"AddTeamsWidget_selectedTeamsContainer__JF2Vw\",\"addButton\":\"AddTeamsWidget_addButton__ULlf5\",\"teamsList\":\"AddTeamsWidget_teamsList__ghTXi\",\"titles\":\"AddTeamsWidget_titles__X7xC3\"};","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport {toast} from 'react-toastify';\r\nimport defaultLogo1 from \"../../../assets/Def1.png\";\r\nimport defaultLogo2 from \"../../../assets/Def2.png\";\r\nimport defaultLogo3 from \"../../../assets/Def3.png\";\r\nimport defaultLogo4 from \"../../../assets/Def4.png\";\r\nimport styles from './AddTeamsWidget.module.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AddTeamsWidget = ({ tournamentId }) => {\r\n  const [teams, setTeams] = useState([]);\r\n  const [selectedTeams, setSelectedTeams] = useState([]);\r\n  const [tournament, setTournament] = useState(null);\r\n  const tournamentIdString = String(tournamentId);\r\n  const navigate= useNavigate();\r\n  const getRandomDefaultLogo = () => {\r\n    const defaultLogos = [defaultLogo1, defaultLogo2, defaultLogo3, defaultLogo4];\r\n    const randomIndex = Math.floor(Math.random() * defaultLogos.length);\r\n    return defaultLogos[randomIndex];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTournamentDetails = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/Tournament/getbyid/${tournamentIdString}`);\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch tournament details');\r\n            }\r\n            const tournamentData = await response.json();\r\n            setTournament(tournamentData);\r\n        } catch (error) {\r\n            console.error('Error fetching tournament details:', error);\r\n        }\r\n    };\r\n\r\n    fetchTournamentDetails();\r\n}, [tournamentId]);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchTeams = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/Team/getall');\r\n        setTeams(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching teams:', error);\r\n      }\r\n    };\r\nconsole.log(tournamentId)\r\n    fetchTeams();\r\n  }, []);\r\n\r\n\r\n  const [matchestable, setMatches] = useState([]);\r\n\r\n    /*useEffect(() => {\r\n        const fetchMatches = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:3000/Tournament/fixtures/65eb22e0767105013a8eaa41');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches');\r\n                }\r\n                const data = await response.json();\r\n                console.log(data.fixtures)\r\n                console.log(matchestable)\r\n                setMatches(data.fixtures);\r\n                console.log(\"after the set\",matchestable)\r\n            } catch (error) {\r\n                console.error('Error fetching matches:', error);\r\n            }\r\n        };\r\n\r\n        fetchMatches();\r\n    }, []);*/\r\n\r\n\r\n    const addTeamsToTournament = async (tournamentIdString) => {\r\n      const expectedTeamIds = tournament.numberOfTeams\r\n\r\n    const selectedTeamIds = selectedTeams.map(team => team._id);\r\n    const number = selectedTeamIds.length;\r\n      if (number != expectedTeamIds) {\r\n\r\n        toast.error(\"Number of the teams selected is not valid\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n\r\n        const addTeamsResponse = await fetch(`http://localhost:3000/Tournament/addteams/${tournament._id}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ teams: selectedTeams })\r\n        });\r\n\r\n        if (!addTeamsResponse.ok) {\r\n          throw new Error('Failed to add teams to the tournament');\r\n        }\r\n\r\n\r\n\r\n        toast.success('Selected teams added to the tournament successfully.');\r\n        if (tournament.TournamentType === 'League') {\r\n          try {\r\n            const [generateScheduleResponse, standingsResponse] = await Promise.all([\r\n              fetch(`http://localhost:3000/Tournament/generateRoundRobinSchedule/${tournament._id}`),\r\n              fetch(`http://localhost:3000/Standings/CreateStandings/${tournament._id}`)\r\n            ]);\r\n\r\n            if (!generateScheduleResponse.ok) {\r\n              throw new Error('Failed to generate round robin schedule');\r\n            }\r\n\r\n            if (!standingsResponse.ok) {\r\n              throw new Error('Failed to generate standings');\r\n            }\r\n\r\n          } catch (error) {\r\n            console.error('Error during schedule or standings generation:', error);\r\n          }\r\n      } else if (tournament.TournamentType === 'Knockout') {\r\n          const generateScheduleResponse = await fetch(`http://localhost:3000/Tournament/KnockoutTournamentBuild/${tournament._id}`);\r\n          if (!generateScheduleResponse.ok) {\r\n              throw new Error('Failed to generate Knockout rounds');\r\n          }\r\n          console.log('Knockout rounds generated successfully.');\r\n      } else if (tournament.TournamentType === 'Championship') {\r\n        const generateScheduleResponse = await fetch(`http://localhost:3000/Tournament/ChampionshipGroupsAndMatches/${tournament._id}`);\r\n        if (!generateScheduleResponse.ok) {\r\n            throw new Error('Failed to generate championship tournament');\r\n        }\r\n        console.log('championship tournament generated successfully.');\r\n    }\r\n      else {\r\n          throw new Error('Invalid tournament type');\r\n      }\r\n\r\n      navigate('/TournamentCreated');\r\n  } catch (error) {\r\n      console.error('Error adding teams to tournament:', error);\r\n  }\r\n    };\r\n\r\n\r\n\r\n  const onDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n\r\n    const sourceIndex = result.source.index;\r\n    const destinationIndex = result.destination.index;\r\n\r\n    const sourceList = result.source.droppableId === 'teams' ? teams : selectedTeams;\r\n    const destinationList = result.destination.droppableId === 'teams' ? teams : selectedTeams;\r\n\r\n    const sourceItem = sourceList[sourceIndex];\r\n\r\n    // If moving within the same list\r\n    if (result.source.droppableId === result.destination.droppableId) {\r\n      sourceList.splice(sourceIndex, 1);\r\n      sourceList.splice(destinationIndex, 0, sourceItem);\r\n      if (result.source.droppableId === 'teams') {\r\n        setTeams([...sourceList]);\r\n      } else {\r\n        setSelectedTeams([...sourceList]);\r\n      }\r\n    } else {\r\n      sourceList.splice(sourceIndex, 1);\r\n      destinationList.splice(destinationIndex, 0, sourceItem);\r\n      setTeams([...teams]);\r\n      setSelectedTeams([...selectedTeams]);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <>\r\n          <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 2.5fr 0.5fr\" }} className=\"wrapper\">\r\n              <div style={{ paddingLeft:\"10%\" }}> <h2> <u>Available Teams</u></h2></div>\r\n              <div style={{ paddingLeft:\"50%\" }}> <h2><u>Selected Teams</u></h2></div>\r\n              <div>\r\n                  <button onClick={addTeamsToTournament} className={styles.addButton}>Save Tournament</button>\r\n              </div>\r\n              <DragDropContext onDragEnd={onDragEnd}>\r\n                  <div style={{\r\n                      border: \"2px dashed #948409\",\r\n                      width: \"270px\",\r\n                      padding: \"15px\",\r\n                      minHeight: \"170px\",\r\n                      maxHeight: \"690px\",\r\n                      borderRadius: \"5px\",\r\n                      overflowY: \"scroll\",\r\n                  }}>\r\n                      <Droppable droppableId=\"teams\">\r\n                          {(provided) => (\r\n                              <div className={styles.teamsList} {...provided.droppableProps} ref={provided.innerRef}>\r\n                                  {teams.map((team, index) => (\r\n                                      <Draggable key={team._id} draggableId={team._id} index={index}>\r\n                                          {(provided) => (\r\n                                              <div\r\n                                                  ref={provided.innerRef}\r\n                                                  {...provided.draggableProps}\r\n                                                  {...provided.dragHandleProps}\r\n                                                  className={styles.teamContainer}\r\n                                              >\r\n                                                  <img\r\n                                                      src={team.logo || getRandomDefaultLogo()}\r\n                                                      alt={team.name}\r\n                                                      className={styles.teamLogo}\r\n                                                  />\r\n                                                  <span className={styles.teamName}>{team.name}</span> {/* Utilisation d'une balise span pour le nom de l'équipe */}\r\n                                              </div>\r\n                                          )}\r\n                                      </Draggable>\r\n                                  ))}\r\n                                  {provided.placeholder}\r\n                              </div>\r\n                          )}\r\n                      </Droppable>\r\n                  </div>\r\n                  <div style={{\r\n\r\n                      padding: \"15px\",\r\n                      Height: \"100%\",\r\n                      overflowY: \"scroll\",\r\n                  }}>\r\n                      <Droppable droppableId=\"selected-teams\">\r\n                          {(provided) => (\r\n                              <div\r\n                                  className={styles.selectedTeamsContainer}\r\n                                  {...provided.droppableProps}\r\n                                  ref={provided.innerRef}\r\n                              >\r\n                                  {selectedTeams.map((team, index) => (\r\n                                      <Draggable key={team._id} draggableId={team._id} index={index}>\r\n                                          {(provided) => (\r\n                                              <div\r\n                                                  ref={provided.innerRef}\r\n                                                  {...provided.draggableProps}\r\n                                                  {...provided.dragHandleProps}\r\n                                              >\r\n                                                  <img\r\n                                                      src={team.logo || getRandomDefaultLogo()}\r\n                                                      alt={team.name}\r\n                                                      className={styles.teamLogo}\r\n                                                  />\r\n                                                  {team.name}\r\n                                              </div>\r\n                                          )}\r\n                                      </Draggable>\r\n                                  ))}\r\n                                  {provided.placeholder}\r\n                              </div>\r\n                          )}\r\n                      </Droppable>\r\n                  </div>\r\n              </DragDropContext>\r\n          </div>\r\n      </>\r\n\r\n  );\r\n};\r\n\r\nexport default AddTeamsWidget;\r\n","import React from 'react'\r\nimport PageHeader from '@layout/PageHeader';\r\nimport AddTeamsWidget from '../../widgets/TournamentWidgets/AddingTeams/AddTeamsWidget'; \r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst AddTeams = () => {\r\n  const { state } = useLocation();\r\n  const tournamentId = state.responseData.tournamentId;\r\n  \r\n  return (<>    \r\n  \r\n  <PageHeader title=\"Add Teams\" />\r\n    <AddTeamsWidget   tournamentId={tournamentId} />\r\n   \r\n</>\r\n\r\n  )\r\n}\r\n\r\nexport default AddTeams"],"names":["_ref","tournamentId","teams","setTeams","useState","selectedTeams","setSelectedTeams","tournament","setTournament","tournamentIdString","String","navigate","useNavigate","getRandomDefaultLogo","defaultLogos","defaultLogo1","defaultLogo2","defaultLogo3","defaultLogo4","Math","floor","random","length","useEffect","async","response","fetch","concat","ok","Error","tournamentData","json","error","console","fetchTournamentDetails","log","axios","get","data","fetchTeams","matchestable","setMatches","_jsx","_Fragment","children","_jsxs","style","display","gridTemplateColumns","className","paddingLeft","onClick","expectedTeamIds","numberOfTeams","map","team","_id","method","headers","body","JSON","stringify","toast","success","TournamentType","generateScheduleResponse","standingsResponse","Promise","all","styles","DragDropContext","onDragEnd","result","destination","sourceIndex","source","index","destinationIndex","sourceList","droppableId","destinationList","sourceItem","splice","border","width","padding","minHeight","maxHeight","borderRadius","overflowY","Droppable","provided","droppableProps","ref","innerRef","Draggable","draggableId","draggableProps","dragHandleProps","src","logo","alt","name","placeholder","Height","AddTeams","state","useLocation","responseData","PageHeader","title","AddTeamsWidget"],"sourceRoot":""}