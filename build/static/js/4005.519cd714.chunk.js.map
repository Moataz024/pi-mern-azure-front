{"version":3,"file":"static/js/4005.519cd714.chunk.js","mappings":"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","sources":["widgets/LoginForm.jsx","hooks/useLogin.js","pages/Login.jsx"],"sourcesContent":["// components\r\nimport PasswordInput from '@components/PasswordInput';\r\nimport BasicCheckbox from '@ui/BasicCheckbox';\r\nimport ResetPasswordPopup from '@components/ResetPasswordPopup';\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n\r\n// hooks\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport {useEffect, useState} from 'react';\r\n\r\n// utils\r\nimport classNames from 'classnames';\r\nimport {useLogin} from \"@hooks/useLogin\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst LoginForm = () => {\r\n    const [open, setOpen] = useState(false);\r\n    const {login,error,isLoading}= useLogin();\r\n\r\n    const {register, handleSubmit, formState: {errors}, control} = useForm({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        }\r\n    });\r\n    const onSubmit = async (data) => {\r\n        await login(data.email,data.password);\r\n    };\r\n    useEffect(() => {\r\n        const handleKeyPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                event.preventDefault();\r\n                handleSubmit(onSubmit)();\r\n            }\r\n        };\r\n\r\n        // Add event listener to the form\r\n        document.querySelector('form').addEventListener('keypress', handleKeyPress);\r\n\r\n        return () => {\r\n            // Cleanup: remove event listener when component unmounts\r\n            document.querySelector('form').removeEventListener('keypress', handleKeyPress);\r\n        };\r\n    }, [handleSubmit, onSubmit]);\r\n\r\n\r\n    const handleResetPassword = e => {\r\n        e.preventDefault();\r\n        setOpen(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Account login</h1>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"d-flex flex-column g-10\" style={{margin: '20px 0 30px'}}>\r\n                    <div className=\"d-flex flex-column g-20\">\r\n                        <input className={classNames('field', {'field--error': errors.email})}\r\n                               type=\"text\"\r\n                               placeholder=\"Email\"\r\n                               {...register('email', {required: true, pattern: /^\\S+@\\S+$/i})}/>\r\n                        <Controller control={control}\r\n                                    name=\"password\"\r\n                                    rules={{required: true}}\r\n                                    render={({field: {ref, onChange, value}, fieldState: {error}}) => (\r\n                                        <PasswordInput\r\n                                            className={classNames('field', {'field--error': error})}\r\n                                            value={value}\r\n                                            onChange={e => onChange(e.target.value)}\r\n                                            placeholder=\"Password\"\r\n                                            innerRef={ref}/>\r\n                                    )}\r\n                        />\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center g-10\">\r\n                        <Controller control={control}\r\n                                    name=\"rememberMe\"\r\n                                    render={({field: {ref, onChange, value}}) => (\r\n                                        <BasicCheckbox id=\"rememberMe\"\r\n                                                       checked={value}\r\n                                                       onChange={e => onChange(e.target.checked)}\r\n                                                       innerRef={ref}/>\r\n                                    )}\r\n                        />\r\n                        <label htmlFor=\"rememberMe\">Remember me</label>\r\n                    </div>\r\n                </div>\r\n                {error && <div style={{\r\n                    color:\"red\",\r\n                    fontWeight:\"bold\",\r\n                    textAlign:\"center\",\r\n                    margin:\"20px\"\r\n                }}>{error}</div>}\r\n                <br/>\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <button style={{backgroundColor:\"#FDCA40\",color:\"black\",width:\"40%\"}} disabled={isLoading} className=\"btn btn--sm\" type=\"submit\">\r\n                       Login\r\n                    </button>\r\n                    <button disabled={isLoading} className=\"text-button text-button--sm\" onClick={handleResetPassword}>\r\n                        Reset password\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            <br/>\r\n            <br/>\r\n            <hr/>\r\n            <br/>\r\n            <br/>\r\n            <div >\r\n                <form className=\"d-flex justify-content-center align-items-end\" action=\"http://localhost:3000/auth/google\" >\r\n                    <button className=\"btn justify-content-between\">\r\n                        <p>Sign in with</p> <span><FcGoogle /></span>\r\n                    </button></form>\r\n                <br/>\r\n                <div style={{\r\n                    justifyContent:\"center\",\r\n                    textAlign:\"center\",\r\n                    alignContent:\"center\"\r\n                }}>\r\n                    <NavLink to=\"/sign-up\" >\r\n                        <button disabled={isLoading} className=\"text-button text-button--sm\">\r\n                            Don't have an account?<b> Register</b>\r\n                        </button>\r\n                    </NavLink>\r\n                </div>\r\n\r\n\r\n                <ResetPasswordPopup open={open} onClose={() => setOpen(false)}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import { useState } from 'react'\r\nimport { useAuthContext } from './useAuthContext'\r\nimport {toast} from \"react-toastify\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport {useNavigate,useLocation} from 'react-router-dom';\r\n\r\nexport const useLogin = () => {\r\n    const [error, setError] = useState('')\r\n    const [isLoading, setIsLoading] = useState(null)\r\n    const { dispatch } = useAuthContext()\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const from = location.state?.from?.pathname || \"/\";\r\n    const login = async (email, password) => {\r\n        setIsLoading(true)\r\n        setError('')\r\n\r\n        const response = await fetch('http://localhost:3000/User/login', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n        const json = await response.json()\r\n\r\n        if (json.error) {\r\n            setError(json.error)\r\n            setIsLoading(false)\r\n            toast.error(json.error);\r\n        }\r\n        if (!json.error) {\r\n            localStorage.setItem('token', json.accessToken)\r\n\r\n            const u = jwtDecode(json.accessToken.toString());\r\n            const USER = u.user\r\n            if(!USER.isBlocked){\r\n                dispatch({type: 'LOGIN', payload: USER})\r\n                setIsLoading(false)\r\n                navigate(from,{replace:true});\r\n            }\r\n            if(USER.isBlocked){\r\n                setError(\"Your account has been suspended by an admin\");\r\n                setIsLoading(false)\r\n                toast.error(\"Your account has been suspended by an admin\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return { login, isLoading, error }\r\n}","// components\r\nimport AuthLayout from '@components/AuthLayout';\r\nimport LoginForm from '@widgets/LoginForm';\r\n\r\nconst Login = () => {\r\n    return (\r\n        <AuthLayout title=\"Login\">\r\n            <LoginForm/>\r\n        </AuthLayout>\r\n    );\r\n}\r\n\r\nexport default Login"],"names":["LoginForm","open","setOpen","useState","login","error","isLoading","useLogin","_location$state","_location$state$from","setError","setIsLoading","dispatch","useAuthContext","navigate","useNavigate","from","useLocation","state","pathname","async","email","password","response","fetch","method","headers","body","JSON","stringify","json","toast","localStorage","setItem","accessToken","USER","jwtDecode","toString","user","isBlocked","type","payload","replace","register","handleSubmit","formState","errors","control","useForm","defaultValues","rememberMe","onSubmit","data","useEffect","handleKeyPress","event","key","preventDefault","document","querySelector","addEventListener","removeEventListener","_jsxs","_Fragment","children","_jsx","className","style","margin","classNames","placeholder","required","pattern","Controller","name","rules","render","_ref","field","ref","onChange","value","fieldState","PasswordInput","e","target","innerRef","_ref2","BasicCheckbox","id","checked","htmlFor","color","fontWeight","textAlign","backgroundColor","width","disabled","onClick","action","FcGoogle","justifyContent","alignContent","NavLink","to","ResetPasswordPopup","onClose","Login","AuthLayout","title"],"sourceRoot":""}