{"version":3,"file":"static/js/1441.0e464ef6.chunk.js","mappings":"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","sources":["widgets/TournamentWidgets/WorldWide/TournamentSelector/TournamentSelector.jsx","widgets/TournamentWidgets/WorldWide/VideoDisplay/VideoDisplay.jsx","pages/Tournament/WorldWide.jsx","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import Spring from '@components/Spring'\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './styles.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport defaultLogo from \"../../../../assets/uefa.png\";\r\n\r\nconst TournamentSelectorWorldWide = ({ onSelectTournament }) => {\r\n  const [tournaments, setTournaments] = useState([]);\r\n  const [search, setSearch] = useState('');\r\nconst [leagues , setleagues] = useState();\r\n\r\nuseEffect(() => {\r\n  const fetchApiLeagues = async () => {\r\n\r\nconst url = 'https://free-football-soccer-videos1.p.rapidapi.com/v1/';\r\nconst options = {\r\n  method: 'GET',\r\n  headers: {\r\n    'X-RapidAPI-Key': 'f72b06fffbmshdbb3c567af911fbp16ea8bjsna390cb0595bd',\r\n    'X-RapidAPI-Host': 'free-football-soccer-videos1.p.rapidapi.com'\r\n  }\r\n};\r\n\r\ntry {\r\n\tconst response = await fetch(url, options);\r\n\tconst result = await response.json();\r\n\tsetleagues(result);\r\n} catch (error) {\r\n\tconsole.error(error);\r\n}}\r\nfetchApiLeagues();\r\n}, [])\r\n\r\nconst renderLeagues = () => {\r\n  return leagues.map(league => (\r\n    <div key={league.id} className=\"league-item\" onClick={() => handleTournamentClick(league.id)}>\r\n      <img src={league.logo || defaultLogo} alt=\"League Logo\" className=\"league-logo\"/>\r\n      <p className=\"league-title\">{league.name}</p>\r\n    </div>\r\n  ));\r\n};\r\n  \r\n  useEffect(() => {\r\n    const fetchTournaments = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/Tournament/getall');\r\n        const data = await response.json();\r\n        setTournaments(data);\r\n      } catch (error) {\r\n        console.error('Error fetching tournaments:', error);\r\n      }\r\n    };\r\n\r\n    fetchTournaments();\r\n  }, []);\r\n  const inputRef = useRef(null);\r\n  \r\n  const handleTournamentClick = (tournamentId,title) => {\r\n  \r\n    onSelectTournament(tournamentId,title);\r\n  };\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', detectkeydown , true)  \r\n  \r\n  }, [])\r\n  const detectkeydown=(e) =>{\r\n\r\n    if(e.key ===\"/\"){\r\n      e.preventDefault();\r\n      inputRef.current.focus();\r\n      inputRef.current.value = ''; \r\n    }\r\n  }\r\nconst navigate= useNavigate();\r\n  const GoToTournamentReview = async (tournamentId) =>{\r\n    navigate('/TournamentReview', { state: { tournamentId } });\r\n  }\r\n\r\nif (!leagues){\r\n  return null ;\r\n}\r\n  return (\r\n    \r\n    <Spring className=\"card d-flex flex-column g-16 card-padded\">\r\n      <div style={{ display: 'flex' ,justifyContent: 'space-between'}}>\r\n      <h2>Tournaments</h2>\r\n      <Form>\r\n          <InputGroup className='my-3'>\r\n\r\n            \r\n          \r\n              <Form.Control\r\n                ref={inputRef}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                placeholder='Press / to search'\r\n                style={{\r\n                  padding: '10px',\r\n                  borderRadius: '5px',\r\n                  border: '1px solid #ccc',\r\n                  boxShadow: 'none',\r\n                }}\r\n              />\r\n          \r\n          </InputGroup>\r\n        </Form></div>\r\n    <div className=\"tournament-selector-container\">\r\n    {leagues.map((league, index) => (\r\n  <div key={index} className=\"tournament-item\" onClick={() => handleTournamentClick(league.competition.id, league.title)}>\r\n     <img src={league.thumbnail || defaultLogo} alt=\"Tournament Logo\"  className=\"tournament-logo\"/>\r\n     <p className=\"tournament-title\">{league.competition.name}<br></br>\r\n     {league.title}\r\n     </p>\r\n     \r\n     {console.log(league)}\r\n  </div>\r\n))}\r\n    </div>\r\n  </Spring>\r\n   \r\n  );\r\n};\r\n\r\nexport default TournamentSelectorWorldWide;\r\n","import { useEffect, useState } from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\nimport Spring from '@components/Spring';\r\nimport { NavLink } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport { getMonthDays } from '@utils/helpers';\r\nimport classNames from 'classnames';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport { useThemeProvider } from '@contexts/themeContext';\r\n\r\n\r\n\r\nconst Navigator = ({ active, setActive }) => {\r\n    const { theme, direction } = useThemeProvider();\r\n    const [swiper, setSwiper] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (swiper) {\r\n            swiper.slideToLoop(parseInt(active) - 1);\r\n        }\r\n    }, [swiper, active]);\r\n\r\n    useEffect(() => {\r\n        if (swiper) {\r\n            swiper.changeLanguageDirection(direction);\r\n            swiper.update();\r\n        }\r\n    }, [swiper, direction]);\r\n\r\n    return (\r\n        <div className={`${styles.navigator} ${theme === 'light' ? styles.light : styles.dark}`}>\r\n            <Swiper\r\n                className=\"h-100\"\r\n                slidesPerView=\"auto\"\r\n                spaceBetween={10}\r\n                centeredSlides={true}\r\n                onSwiper={setSwiper}\r\n                loop\r\n                initialSlide={+active - 1}\r\n            >\r\n                {getMonthDays().map((day, index) => (\r\n                    <SwiperSlide className={styles.slide} key={index}>\r\n                        <div\r\n                            className={classNames(`${styles.navigator_item} ${styles[direction]}`, {\r\n                                [styles.active]: active === parseInt(day.date)\r\n                            })}\r\n                            onClick={() => setActive(parseInt(day.date))}\r\n                        >\r\n                            <h4 className={styles.day}>{day.date}</h4>\r\n                            <span className=\"label h6\">{day.weekday}</span>\r\n                        </div>\r\n                    </SwiperSlide>\r\n                ))}\r\n            </Swiper>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst VideoDisplay = ({ selectedTournamentId,title }) => {\r\n    const [fixtures, setFixtures] = useState([]);\r\n    const today = dayjs().date();\r\n    const [selectedDay, setSelectedDay] = useState(today); // Default selected day\r\n    const [tournament, settournament]= useState({})\r\n    \r\n    const [tournamentType , settournamentType] =useState();\r\n    const [rounds , setRounds] = useState([]);\r\n    const [groupMatches , setGroupMatches] =useState([]);\r\n    const [leagues , setleagues] = useState();\r\n\r\n    useEffect(() => {\r\n      const fetchApiLeagues = async () => {\r\n    \r\n    const url = 'https://free-football-soccer-videos1.p.rapidapi.com/v1/';\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-RapidAPI-Key': 'f72b06fffbmshdbb3c567af911fbp16ea8bjsna390cb0595bd',\r\n        'X-RapidAPI-Host': 'free-football-soccer-videos1.p.rapidapi.com'\r\n      }\r\n    };\r\n    \r\n    try {\r\n        const response = await fetch(url, options);\r\n        const result = await response.json();\r\n        setleagues(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }}\r\n    fetchApiLeagues();\r\n    }, [])\r\n\r\n    const [highlights, setHighlights] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchHighlights = async (selectedTournamentId) => {\r\n            try {\r\n                leagues.forEach((league) => {\r\n                    if (league.competition.id === selectedTournamentId && league.title ===title) {\r\n                        setHighlights(league.videos);\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error('Error fetching highlights:', error);\r\n            }\r\n        };\r\n    \r\n        // Call fetchHighlights with the selectedTournamentId\r\n        fetchHighlights(selectedTournamentId);\r\n    }, [selectedTournamentId, leagues]); // Add leagues as a dependency to update when leagues change\r\n    \r\n   \r\n\r\n    useEffect(() => {\r\n      const fetchTournamentDetails = async () => {\r\n        \r\n            try {\r\n                if (selectedTournamentId){\r\n                const response = await fetch(`http://localhost:3000/Tournament/getbyid/${selectedTournamentId}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch tournament details');\r\n                }\r\n                const tournamentData = await response.json();\r\n                settournament(tournamentData);\r\n                settournamentType(tournament.TournamentType);\r\n        }\r\n          \r\n          } catch (error) {\r\n              console.error('Error fetching tournament details:', error);\r\n          }\r\n      };\r\n  \r\n      fetchTournamentDetails();\r\n  }, [selectedTournamentId]);\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchMatchesForLeague = async () => {\r\n        try {\r\n            if (tournament._id) {\r\n                const response = await fetch(`http://localhost:3000/Tournament/fixturesByDay/${tournament._id}/${selectedDay}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch fixtures');\r\n                }\r\n                const data = await response.json();\r\n                console.log(data.fixtures);\r\n                setFixtures(data.fixtures);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching fixtures:', error);\r\n        }\r\n    };\r\n\r\n    fetchMatchesForLeague();\r\n}, [tournament._id, selectedDay]);\r\n\r\nuseEffect(() => {\r\n    const fetchMatchesForKnockout = async () => {\r\n        try {\r\n            if (tournament._id) {\r\n                const response = await fetch(`http://localhost:3000/Tournament/FixturesByDayKnockout/${tournament._id}/${selectedDay}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for Knockout');\r\n                }\r\n                const data = await response.json();\r\n                console.log(data.fixtures)\r\n                setRounds(data.fixtures);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching fixtures:', error);\r\n        }\r\n    };\r\n\r\n    fetchMatchesForKnockout();\r\n}, [tournament._id, selectedDay]);\r\n\r\n\r\nuseEffect(() => {\r\n    const fetchMatchesForChampionship = async () => {\r\n        try {\r\n            if (tournament._id) {\r\n                const response = await fetch(`http://localhost:3000/Tournament/MatcheGroupsByday/${tournament._id}/${selectedDay}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for Knockout');\r\n                }\r\n                const data = await response.json();\r\n                setGroupMatches(data.fixtures);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching fixtures:', error);\r\n        }\r\n    };\r\n\r\n    fetchMatchesForChampionship();\r\n}, [tournament._id, selectedDay]);\r\n\r\n  useEffect(() => {\r\n        const fetchMatchesForLeague = async () => {\r\n            try {\r\n                \r\n                if (tournament._id) { // Check if selectedTournamentId is not undefined\r\n                  const response = await fetch(`http://localhost:3000/Tournament/fixturesByDay/${tournament._id}/${selectedDay}`);\r\n                  if (!response.ok) {\r\n                    throw new Error('Failed to fetch fixtures');\r\n                  }\r\n                  const data = await response.json();\r\n                  console.log(data.fixtures)\r\n                  setFixtures(data.fixtures);\r\n                }\r\n              } catch (error) {\r\n                console.error('Error fetching fixtures:', error);\r\n              }\r\n        };\r\n\r\n        const fetchMatchesForKnockout = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/Tournament/FixturesByDayKnockout/${tournament._id}/${selectedDay}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for Knockout');\r\n                }\r\n                const data = await response.json();\r\n                console.log(data.fixtures)\r\n                setRounds(data.fixtures);\r\n            } catch (error) {\r\n                console.error('Error fetching matches for type 2:', error);\r\n            }\r\n        };\r\n        const fetchMatchesForChampionship = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/Tournament/getMatchesFromGroupsWithMatches/${tournament._id}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for Knockout');\r\n                }\r\n                const data = await response.json();\r\n                setGroupMatches(data.gamesByGroup);\r\n            } catch (error) {\r\n                console.error('Error fetching matches for type 2:', error);\r\n            }\r\n        };\r\n\r\n        if ( tournamentType) { // Check if tournamentType is set before fetching matches\r\n            if ( tournamentType === 'League') {\r\n                fetchMatchesForLeague();\r\n            } else if ( tournamentType === 'Knockout') {\r\n                fetchMatchesForKnockout();\r\n            }else if ( tournamentType === 'Championship'){\r\n                fetchMatchesForChampionship();\r\n            }\r\n        }\r\n    }, [selectedTournamentId]);\r\n\r\n    \r\n\r\n    return (\r\n        <Spring className=\"card d-flex flex-column\">\r\n        <div className=\"card_header d-flex flex-column g-10\" style={{ paddingBottom: 20 }}>\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n    \r\n                {highlights.map((highlight, index) => (\r\n                    <div key={index} style={{ marginBottom: '20px' , marginRight : '200px'  , marginLeft : '20px',justifyContent: 'center'}}>\r\n                        <h4>{highlight.title}</h4>\r\n                        <div style={{ height: '400px', width: '800px' }} dangerouslySetInnerHTML={{ __html: highlight.embed }} />\r\n                    </div>\r\n                ))}\r\n    \r\n            </div>\r\n        </div>\r\n    </Spring>\r\n    \r\n    );\r\n};\r\n\r\nexport default  VideoDisplay;\r\n\r\n\r\n","import AppGrid from '@layout/AppGrid'\r\nimport PageHeader from '@layout/PageHeader'\r\nimport TournamentChoice from '@widgets/TournamentWidgets/LeagueWidgets/frontOffice/tournamentChoice'\r\nimport TournamentSelectorWorldWide from '@widgets/TournamentWidgets/WorldWide/TournamentSelector/TournamentSelector'\r\nimport VideoDisplay from '@widgets/TournamentWidgets/WorldWide/VideoDisplay/VideoDisplay'\r\nimport React, { useState } from 'react'\r\n\r\nconst WorldWide = () => {\r\n    const [selectedTournamentTitle, setSelectedTournamentTitle] = useState(null);\r\n    const [selectedTournamentId, setSelectedTournamentId] = useState(null);\r\n    const handleTournamentSelection = (tournamentId,title) => {\r\n      setSelectedTournamentId(tournamentId);\r\n      setSelectedTournamentTitle(title)\r\n    };\r\n\r\n    const widgets = {\r\n        segment_chart: <TournamentSelectorWorldWide onSelectTournament={handleTournamentSelection} />,\r\n       \r\n        month_matches: <VideoDisplay selectedTournamentId={selectedTournamentId} title={selectedTournamentTitle} />,\r\n       \r\n    }\r\n    \r\n  return (<>\r\n\r\n    <PageHeader title=\"World Wide Football\" />\r\n    <AppGrid id=\"championships\" widgets={widgets} />\r\n  \r\n  </>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default WorldWide","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","onSelectTournament","tournaments","setTournaments","useState","search","setSearch","leagues","setleagues","useEffect","async","options","method","headers","response","fetch","result","json","error","console","fetchApiLeagues","data","fetchTournaments","inputRef","useRef","handleTournamentClick","tournamentId","title","document","addEventListener","detectkeydown","e","key","preventDefault","current","focus","value","useNavigate","_jsxs","Spring","className","children","style","display","justifyContent","_jsx","Form","InputGroup","Control","ref","onChange","target","placeholder","padding","borderRadius","border","boxShadow","map","league","index","onClick","competition","id","src","thumbnail","defaultLogo","alt","name","log","_ref2","selectedTournamentId","fixtures","setFixtures","today","dayjs","date","selectedDay","setSelectedDay","tournament","settournament","tournamentType","settournamentType","rounds","setRounds","groupMatches","setGroupMatches","highlights","setHighlights","forEach","videos","fetchHighlights","concat","ok","Error","tournamentData","TournamentType","fetchTournamentDetails","_id","fetchMatchesForLeague","fetchMatchesForKnockout","fetchMatchesForChampionship","gamesByGroup","paddingBottom","highlight","marginBottom","marginRight","marginLeft","height","width","dangerouslySetInnerHTML","__html","embed","WorldWide","selectedTournamentTitle","setSelectedTournamentTitle","setSelectedTournamentId","widgets","segment_chart","TournamentSelectorWorldWide","handleTournamentSelection","month_matches","VideoDisplay","_Fragment","PageHeader","AppGrid","context","React","displayName","InputGroupText","bsPrefix","as","Component","props","useBootstrapPrefix","classNames","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Text","Radio","FormCheckInput","type","Checkbox"],"sourceRoot":""}