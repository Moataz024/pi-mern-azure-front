{"version":3,"file":"static/js/2864.f872db7a.chunk.js","mappings":"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","sources":["widgets/Admin/PaymentSettings/index.jsx","pages/Payment/PaymentOrganizer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Spring from '@components/Spring';\r\nimport { useWindowSize } from 'react-use';\r\nimport CustomSelect from '@ui/CustomSelect';\r\nimport { toast } from 'react-toastify';\r\nimport { useForm } from 'react-hook-form';\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Tabs} from '@mui/material';\r\nimport {useAuthContext} from \"@hooks/useAuthContext\";\r\nimport axios from \"axios\";\r\nimport classNames from \"classnames\";\r\nimport imagetransaction from \"@assets/fans/transactionimage.png\";\r\n\r\n\r\nconst App = () => {\r\n  const [tournamentId, setTournamentId] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [tournaments, setTournaments] = useState([]);\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const { width } = useWindowSize();\r\n  const [duration, setDuration] = useState(0);\r\n  const [startDay, setStartDay] = useState(0);\r\n  const [startMonth, setStartMonth] = useState(0);\r\n  const [startYear, setStartYear] = useState(0);\r\n  const [endDay, setEndDay] = useState(0);\r\n  const [endMonth, setEndMonth] = useState(0);\r\n  const [endYear, setEndYear] = useState(0);\r\n  const { USER } = useAuthContext();\r\n  const [userName, setUserName] = useState('');\r\n  const [userEmail, setUserEmail] = useState('');\r\n\r\n\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n\r\n  const { handleSubmit } = useForm();\r\n  const [openTermsDialog, setOpenTermsDialog] = useState(true);\r\n  const [tournamentSelected, setTournamentSelected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchTournaments = async () => {\r\n      try {\r\n        const userResponse = await axios.get(`http://localhost:3000/User/getbyemail?email=${USER.email}`);\r\n        const userId = userResponse.data._id;\r\n        console.log(userId);\r\n\r\n        const response = await axios.get(`http://localhost:3000/Tournament/getByUserId/${userId}`);\r\n\r\n        const data = response.data && response.data.tournaments ? response.data.tournaments : [];\r\n        console.log(data);\r\n\r\n        setTournaments(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tournaments:\", error.message);\r\n      }\r\n    };\r\n\r\n    if (USER && USER.email) {\r\n      fetchTournaments();\r\n    }\r\n  }, [USER]);\r\n\r\n\r\n  console.log(\"email user\",USER.email)\r\n\r\n  const handleCheckout = async () => {\r\n    try {\r\n      const userResponse = await axios.get(`http://localhost:3000/User/getbyemail?email=${USER.email}`);\r\n      const userIdentif = userResponse.data._id;\r\n      console.log(userIdentif);\r\n\r\n      const response = await fetch(\"http://localhost:3000/payment/create-checkout-session\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          userId: userIdentif,\r\n          tournamentId: tournamentId,\r\n          items: [\r\n            {\r\n              title: title,\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error(\"Server error:\", response.statusText);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      window.location.href = data.url;\r\n    } catch (error) {\r\n      console.error(\"Error during checkout:\", error.message);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    toast.info(\"Your details have been successfully saved! Please proceed with the payment process.\");\r\n  };\r\n\r\n  const handleTournamentChange = (selectedTournament) => {\r\n    setTournamentId(selectedTournament);\r\n    const selectedTournamentData = tournaments.find(tournament => tournament._id === selectedTournament);\r\n\r\n    if (selectedTournamentData) {\r\n      setTitle(selectedTournamentData.title);\r\n      setStartDay(selectedTournamentData.startDay);\r\n      setStartMonth(selectedTournamentData.startMonth);\r\n      setStartYear(selectedTournamentData.startYear);\r\n      setEndDay(selectedTournamentData.endDay);\r\n      setEndMonth(selectedTournamentData.endMonth);\r\n      setEndYear(selectedTournamentData.endYear);\r\n\r\n      const start = new Date(selectedTournamentData.startYear, selectedTournamentData.startMonth - 1, selectedTournamentData.startDay);\r\n      const end = new Date(selectedTournamentData.endYear, selectedTournamentData.endMonth - 1, selectedTournamentData.endDay);\r\n\r\n      setStartDate({\r\n        day: start.getDate(),\r\n        month: start.getMonth() + 1,\r\n        year: start.getFullYear(),\r\n      });\r\n\r\n      setEndDate({\r\n        day: end.getDate(),\r\n        month: end.getMonth() + 1,\r\n        year: end.getFullYear(),\r\n      });\r\n\r\n      const durationInDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\r\n      setDuration(durationInDays);\r\n    }\r\n  };\r\n  return (\r\n      <form className=\"d-flex flex-column g-20\" onSubmit={handleSubmit(onSubmit)}>\r\n        <Spring className=\"card d-flex flex-column card-padded\">\r\n          <div className=\"d-flex flex-column justify-content-between flex-1\">\r\n            <Tabs\r\n                style={{ width: '100%', backgroundColor: '#FDCA40', color: 'black', justifyContent: 'center' }}\r\n            >\r\n              <h3 style={{ paddingTop: '10px', marginLeft: '270px', color: 'black' }}>Payment with Stripe</h3>\r\n            </Tabs>\r\n\r\n            <br></br>\r\n\r\n            <div>\r\n              <label>\r\n                User Name\r\n                <input\r\n                    className={classNames('field text-700')}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    disabled={true}\r\n                    value={USER.fullname}\r\n                    onChange={(e) => setUserName(e.target.value)}\r\n                />\r\n              </label>\r\n              <label>\r\n                User Email\r\n                <input\r\n                    className={classNames('field text-700')}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    disabled={true}\r\n                    value={USER.email}\r\n                    onChange={(e) => setUserName(e.target.value)}\r\n                />\r\n              </label>\r\n              <br />\r\n              <hr style={{ margin: '20px 0' }} />\r\n              {tournamentId  ? (\r\n                  <>\r\n                    <label>\r\n                      Tournament Title:\r\n                      <input\r\n                          className={classNames('field text-700')}\r\n                          type=\"text\"\r\n                          value={title}\r\n                          readOnly\r\n                      />\r\n                    </label>\r\n                    <label>\r\n                      Tournament Start Data:\r\n                      <input\r\n                          className={classNames('field text-700')}\r\n                          type=\"text\"\r\n                          value={startDate && `${startDate.day}/${startDate.month}/${startDate.year}`}\r\n                          readOnly\r\n                      />\r\n                    </label>\r\n                    <label>\r\n                      Tournament End Data:\r\n                      <input\r\n                          className={classNames('field text-700')}\r\n                          type=\"text\"\r\n                          value={endDate && `${endDate.day}/${endDate.month}/${endDate.year}`}\r\n                          readOnly\r\n                      />\r\n                    </label>\r\n\r\n                    <label>\r\n                      Tournament Duration:\r\n                      <input\r\n                          className={classNames('field text-700')}\r\n                          type=\"text\"\r\n                          value={duration}\r\n                          readOnly\r\n                      />\r\n                    </label>\r\n                    <button\r\n                        className=\"btn\"\r\n                        type=\"button\"\r\n                        style={{ marginLeft: '150px', width: '60%', backgroundColor: 'red', color: 'white' }}\r\n                        onClick={() => {\r\n                          setTournamentId('');\r\n                          setTitle('');\r\n                          setStartDay(0);\r\n                          setStartMonth(0);\r\n                          setStartYear(0);\r\n                          setEndDay(0);\r\n                          setEndMonth(0);\r\n                          setEndYear(0);\r\n                          setStartDate(null);\r\n                          setEndDate(null);\r\n                          setDuration(0);\r\n                          setTournamentSelected(false);\r\n                        }}\r\n                    >\r\n                      Cancel Selection\r\n                    </button>\r\n                  </>\r\n              ) : (\r\n                  <>\r\n                    <label>\r\n                      Tournament Title:\r\n                      <CustomSelect\r\n                          className=\"custom-select\"\r\n                          options={(tournaments || []).map(tournament => ({\r\n                            label: tournament.title,\r\n                            value: tournament._id,\r\n                          }))}\r\n                          value={{ label: tournamentId, value: tournamentId }}\r\n                          onChange={(selectedOption) => {\r\n                            handleTournamentChange(selectedOption.value);\r\n                            setTournamentSelected(true);\r\n                          }}\r\n                      />\r\n                    </label>\r\n                    {tournamentSelected ? null : (\r\n                        <p style={{ color: 'red', marginLeft: '10px' }}>Please select a tournament.</p>\r\n                    )}\r\n                  </>\r\n\r\n              )}\r\n\r\n              <br /><br />\r\n            </div>\r\n\r\n\r\n\r\n            <button\r\n                className=\"btn\"\r\n                type=\"submit\"\r\n                style={{ marginLeft: '150px', width: '60%', backgroundColor: '#FDCA40', color: 'black' }}\r\n                onClick={handleCheckout}\r\n            >\r\n              Proceed to Checkout\r\n            </button>\r\n\r\n            <br /><br />\r\n            <button\r\n                className=\"btn\"\r\n                type=\"button\"\r\n                style={{  width: '100%', backgroundColor: 'transparent', color: 'white' }}\r\n                onClick={() => setOpenTermsDialog(true)}\r\n            >\r\n              <u>View the Terms & Conditions before completing your payment with GSCoin or Stripe.</u>\r\n            </button>\r\n            <Dialog open={openTermsDialog} onClose={() => setOpenTermsDialog(false)}>\r\n              <DialogTitle>Terms & Conditions</DialogTitle>\r\n              <DialogContent>\r\n                <div   style={{  marginLeft:'20%',marginBottom:'5%',width: '100%',fontWeight:'bold',fontSize:'20px', color: 'red' }}>\r\n                  <b>Here are the terms and conditions</b>\r\n                </div>\r\n\r\n\r\n                <ul>\r\n                  <li> <b style={{  fontWeight:'bold',fontSize:'14px', color: 'blue' }}>Term 1 :</b>  Every tournament has a different amount. If your tournament is a <b>league</b>, you must pay <b>50 TND</b>. If your tournament is a <b>knockout</b>, you should pay  <b>30 TND.</b> If the tournament is a <b>Championship,</b> you need to pay <b>40 TND</b>.\r\n                  </li>\r\n                  <li><b style={{  fontWeight:'bold',fontSize:'14px', color: 'blue' }}>Term 2 :</b>  The amount may vary depending on the duration of the tournament. <b>The first two days are free</b>, and after these two days, each additional <b>day costs 2 TND</b>. <u>For example, if the tournament duration is 6 days, the amount would be ((6-2) * 2).</u>\r\n                  </li>\r\n                  <li><b style={{  fontWeight:'bold',fontSize:'14px', color: 'blue' }}>Term 3 :</b>    If you want to pay with Coin, <br />\r\n                    <b>I - </b>  first go to this link <a style={{  fontWeight:'bold',fontSize:'13px', color: 'green' }} href=\"https://garksportscoin.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://garksportscoin.netlify.app/</a> . <br />\r\n                    <b>II - </b>  connect with your Metamask wallet. <br />\r\n                    <b> III -</b> Navigate to the 'Send Token' section and ensure you send the token to this wallet address: <b style={{color:'green'}}>0x83d9C5d7DfD1D2f5BeD9aDb3bf187e52F4D914DF</b>.<br/>\r\n                    <b><u>If you don't have the token, you can buy a Coin or pay with Stripe.</u></b><br />\r\n                    <b> IV -</b> After successfully completing your transaction with Coin, you should go to <a style={{  fontWeight:'bold',fontSize:'13px', color: 'green' }}  href=\"https://bscscan.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://bscscan.com/</a> <br/>\r\n                    <b> V -</b> Take a screenshot of your payment transaction.<br/>\r\n                    <img src={imagetransaction} alt=\"Transaction Screenshot\" style={{ display: 'block', width: '100%', border: '2px solid black', height: 'auto' }} className=\"transaction-screenshot-image\" />\r\n                    <b>VI -</b>  Once you've done that, you can continue with your payment like this one.<br/><br/>\r\n                    <p>Every tournament has a different amount in GSC: <br/>\r\n                      ** If your tournament is a <b>league</b>, you must pay <b>6 GSC</b>.<br/>\r\n                      ** If your tournament is a <b>knockout</b>, you should pay  <b>19 GSC.</b><br/>\r\n                      ** If the tournament is a <b>Championship,</b> you need to pay <b>5 GSC</b></p>\r\n                    <p style={{ fontSize:'11px', color: 'blue' }}>The amount does not depend on the duration of the tournament when paying with GSCoin.</p>\r\n                    <br/>\r\n                    <p><u>If you need any support, you can contact us.<a  href=\"https://gmail.com/\"><b>LinkUpTournament@gmail.com</b></a> </u></p><br/>\r\n\r\n                  </li>\r\n                </ul>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button  style={{  width: '100%', backgroundColor: 'green', color: 'white' }} onClick={() => setOpenTermsDialog(false)}>CONFIRM</Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n\r\n          </div>\r\n        </Spring>\r\n      </form>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n","import PageHeader from '@layout/PageHeader';\r\nimport AppGrid from '@layout/AppGrid';\r\nimport AccountSettings from '@widgets/Admin/PaymentSettings';\r\n\r\nconst PaymentOrganizer = () => {\r\n \r\n  const widgets = {\r\n    settings: <AccountSettings/>,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageHeader title=\"Payment with Stripe\" />\r\n      <br />\r\n      <br /><br />\r\n   \r\n      <AppGrid id=\"settings\" widgets={widgets} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentOrganizer;\r\n"],"names":["App","tournamentId","setTournamentId","useState","title","setTitle","tournaments","setTournaments","activeTab","setActiveTab","width","useWindowSize","duration","setDuration","startDay","setStartDay","startMonth","setStartMonth","startYear","setStartYear","endDay","setEndDay","endMonth","setEndMonth","endYear","setEndYear","USER","useAuthContext","userName","setUserName","userEmail","setUserEmail","startDate","setStartDate","endDate","setEndDate","handleSubmit","useForm","openTermsDialog","setOpenTermsDialog","tournamentSelected","setTournamentSelected","useEffect","email","async","userId","axios","get","concat","data","_id","console","log","response","error","message","fetchTournaments","_jsx","className","onSubmit","toast","info","children","Spring","_jsxs","Tabs","style","backgroundColor","color","justifyContent","paddingTop","marginLeft","classNames","type","placeholder","disabled","value","fullname","onChange","e","target","margin","_Fragment","readOnly","day","month","year","onClick","CustomSelect","options","map","tournament","label","selectedOption","selectedTournament","selectedTournamentData","find","start","Date","end","getDate","getMonth","getFullYear","durationInDays","Math","ceil","handleTournamentChange","userIdentif","fetch","method","headers","body","JSON","stringify","items","ok","statusText","json","window","location","href","url","Dialog","open","onClose","DialogTitle","DialogContent","marginBottom","fontWeight","fontSize","rel","src","imagetransaction","alt","display","border","height","DialogActions","Button","PaymentOrganizer","widgets","settings","AccountSettings","PageHeader","AppGrid","id"],"sourceRoot":""}