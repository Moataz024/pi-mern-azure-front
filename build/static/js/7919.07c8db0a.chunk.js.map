{"version":3,"file":"static/js/7919.07c8db0a.chunk.js","mappings":"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","sources":["widgets/TournamentWidgets/LeagueWidgets/frontOffice/tournamentSelector/TournamentSelectorFrontDisplay.jsx","pages/Tournament/LeagueDisplay.jsx","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import Spring from '@components/Spring'\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './styles.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport defaultLogo from \"../../../../../assets/uefa.png\";\r\n\r\n\r\nimport { FaSearch } from 'react-icons/fa';\r\nconst TournamentSelectorFrontDisplay = ({ onSelectTournament }) => {\r\n  const [tournaments, setTournaments] = useState([]);\r\n    const [showSearch, setShowSearch] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n    const inputRef = useRef(null);\r\n  useEffect(() => {\r\n    const fetchTournaments = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/Tournament/getall');\r\n        const data = await response.json();\r\n        setTournaments(data);\r\n      } catch (error) {\r\n        console.error('Error fetching tournaments:', error);\r\n      }\r\n    };\r\n\r\n    fetchTournaments();\r\n  }, []);\r\n\r\n    const handleIconClick = () => {\r\n        setShowSearch((prevShowSearch) => !prevShowSearch);\r\n        if (!showSearch && inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    const handleSearchChange = (e) => {\r\n        setSearch(e.target.value);\r\n    };\r\n\r\n\r\n\r\n  const handleTournamentClick = (tournamentId) => {\r\n  \r\n    onSelectTournament(tournamentId);\r\n  };\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', detectkeydown , true)  \r\n  \r\n  }, [])\r\n  const detectkeydown=(e) =>{\r\n\r\n    if(e.key ===\"/\"){\r\n      e.preventDefault();\r\n      inputRef.current.focus();\r\n      inputRef.current.value = ''; \r\n    }\r\n  }\r\nconst navigate= useNavigate();\r\n  const GoToTournamentReview = async (tournamentId) =>{\r\n    navigate('/TournamentReview', { state: { tournamentId } });\r\n  }\r\n\r\n\r\n    const renderTournamentItem = (tournament) => (\r\n        <div key={tournament._id} className=\"tournament-item\" onClick={() => handleTournamentClick(tournament._id)}>\r\n            <div className=\"tournament-content\">\r\n                <img src={tournament.logo || defaultLogo} alt=\"Tournament Logo\" className=\"tournament-logo\" />\r\n                <p className=\"tournament-title\">{tournament.title}</p>\r\n            </div>\r\n            <button className=\"btn\" style={{backgroundColor: \"#FDCA40\",color:\"black\"}} onClick={() => GoToTournamentReview(tournament._id)}>More</button>\r\n        </div>\r\n    );\r\n\r\n    const filterTournaments = () => {\r\n        return tournaments.filter((tournament) => {\r\n            return search.toLowerCase() === ''\r\n                ? tournament\r\n                : tournament.title && tournament.title.toLowerCase().includes(search);\r\n        });\r\n    };\r\n\r\n return (\r\n        <Spring className=\"card d-flex flex-column g-16 card-padded\">\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                {showSearch ? (\r\n                    <Form>\r\n                        <InputGroup className='my-3' style={{ paddingLeft: '30px' }}>\r\n                            <Form.Control\r\n                                ref={inputRef}\r\n                                value={search}\r\n                                onChange={handleSearchChange}\r\n                                onBlur={() => setShowSearch(false)}\r\n                                placeholder='Search..'\r\n                                style={{\r\n                                    padding: '8px',\r\n                                    borderRadius: '5px',\r\n                                    border: '1px solid #FDCA40',\r\n                                    boxShadow: 'none',\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Form>\r\n                ) : (\r\n                    <h2>Tournaments</h2>\r\n                )}\r\n                <InputGroup.Text onClick={handleIconClick} style={{ cursor: 'pointer' }}>\r\n                    <FaSearch style={{ color: \"#FBCB40\" }} />\r\n                </InputGroup.Text>\r\n            </div>\r\n            <div className=\"tournament-selector-container\">\r\n                {filterTournaments().map(renderTournamentItem)}\r\n            </div>\r\n        </Spring>\r\n    );\r\n};\r\n\r\nexport default TournamentSelectorFrontDisplay;\r\n\r\n\r\n","import PageHeader from '@layout/PageHeader'\r\nimport React from 'react'\r\nimport TournamentChoice from '@widgets/TournamentWidgets/LeagueWidgets/frontOffice/tournamentChoice';\r\nimport { useState } from 'react';\r\nimport TournamentSelectorFrontDisplay from '@widgets/TournamentWidgets/LeagueWidgets/frontOffice/tournamentSelector/TournamentSelectorFrontDisplay';\r\nimport AppGrid from '@layout/AppGrid';\r\nconst LeaguesDisplay = () => {\r\n\r\n  const [selectedTournamentId, setSelectedTournamentId] = useState(null);\r\n  const handleTournamentSelection = (tournamentId) => {\r\n    setSelectedTournamentId(tournamentId);\r\n  };\r\n  const widgets = {\r\n    segment_chart: <TournamentSelectorFrontDisplay onSelectTournament={handleTournamentSelection} />,\r\n   \r\n    month_matches: <TournamentChoice selectedTournamentId={selectedTournamentId} />,\r\n   \r\n}\r\n\r\n\r\n  return (<>    \r\n        <PageHeader title=\"Leagues Display\" />\r\n\r\n       <AppGrid id=\"championships\" widgets={widgets} />\r\n\r\n       \r\n        \r\n        \r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default LeaguesDisplay","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","onSelectTournament","tournaments","setTournaments","useState","showSearch","setShowSearch","search","setSearch","inputRef","useRef","useEffect","async","response","fetch","data","json","error","console","fetchTournaments","document","addEventListener","detectkeydown","e","key","preventDefault","current","focus","value","navigate","useNavigate","_jsxs","Spring","className","children","style","display","justifyContent","alignItems","_jsx","Form","InputGroup","paddingLeft","Control","ref","onChange","target","onBlur","placeholder","padding","borderRadius","border","boxShadow","Text","onClick","handleIconClick","prevShowSearch","cursor","FaSearch","color","filter","tournament","toLowerCase","title","includes","map","handleTournamentClick","tournamentId","_id","src","logo","defaultLogo","alt","backgroundColor","state","GoToTournamentReview","LeaguesDisplay","selectedTournamentId","setSelectedTournamentId","widgets","segment_chart","TournamentSelectorFrontDisplay","month_matches","TournamentChoice","_Fragment","PageHeader","AppGrid","id","context","React","displayName","InputGroupText","bsPrefix","as","Component","props","useBootstrapPrefix","classNames","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","concat","Object","assign","Radio","FormCheckInput","type","Checkbox"],"sourceRoot":""}