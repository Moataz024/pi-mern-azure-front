{"version":3,"file":"static/js/7434.135e3038.chunk.js","mappings":"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","sources":["webpack://liga-soccer/./src/widgets/TournamentWidgets/LeagueWidgets/backOffice/styles.module.scss?d1cc","widgets/TournamentWidgets/LeagueWidgets/backOffice/GameCardBackOffice.jsx","widgets/TournamentWidgets/LeagueWidgets/backOffice/MatchPanel.jsx","widgets/TournamentWidgets/LeagueWidgets/backOffice/TournamentSelector.jsx","pages/Tournament/LeagueInformationsBackOffice.jsx","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"styles_container__sSY7o\",\"light\":\"styles_light__+wvDi\",\"dark\":\"styles_dark__pSF0L\",\"field\":\"styles_field__pHf2V\"};","// styling\r\nimport styles from './styles.module.scss';\r\nimport classNames from 'classnames';\r\nimport { FaMapMarkerAlt, FaClock, FaUser } from 'react-icons/fa';\r\nimport Spring from '@components/Spring';\r\nimport Lineups from '@components/Lineups';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport defaultLogo1 from \"../../../../assets/Def1.png\";\r\nimport defaultLogo2 from \"../../../../assets/Def2.png\";\r\nimport defaultLogo3 from \"../../../../assets/Def3.png\";\r\nimport defaultLogo4 from \"../../../../assets/Def4.png\";\r\nimport {useThemeProvider} from '@contexts/themeContext';\r\nimport {useWindowSize} from 'react-use';\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Popup from '@components/Popup';\r\nimport { useForm } from 'react-hook-form';\r\n\r\n\r\n\r\nconst GameCardBackOffice = ({matchId, index, variant = 'basic',selectedTournamentId}) => {\r\n    const {width} = useWindowSize();\r\n    const {theme} = useThemeProvider();\r\n    const defaultLogos = [defaultLogo1, defaultLogo2, defaultLogo3, defaultLogo4];\r\n    const [match , setMatch] =useState();\r\n    const[stadiums, setStadiums] =useState();\r\n    const[referees, setReferees] =useState();\r\n    const [StadiumInfo ,setStadiumsInfo] = useState();\r\n    const [refereeInfo ,setRefereesInfo] = useState();\r\n    const [startDate, setStartDate] = useState({ day: null, month: null, year: null });\r\n    const [startHour, setStartHour] = useState('');\r\n    const [startMinutes, setStartMinutes] = useState('');\r\n    const { handleSubmit, register, formState: { errors }, control } = useForm({\r\n      defaultValues: {}\r\n    });\r\nuseEffect(() => {\r\n  const fetchStaduimsAndRefs = async () => {\r\ntry{\r\n\r\n        const StaduimsAndRefs = await fetch(`http://localhost:3000/Tournament/getRefereesAndStadiumsForTournament/${selectedTournamentId}`);\r\n        if (!StaduimsAndRefs.ok) {\r\n       toast.error('Failed to fetch  details');\r\n         }\r\n        else{\r\n            const data =await StaduimsAndRefs.json();\r\n            setStadiums(data.Staduims);\r\n            setReferees(data.referees) ;\r\n\r\n        }\r\n\r\n  }catch{\r\n  }\r\n  }\r\n  if(selectedTournamentId){\r\n  fetchStaduimsAndRefs()}\r\n}, [selectedTournamentId])\r\n\r\nuseEffect(() => {\r\n    const fetchStadiumAndRefereeDetails = async () => {\r\n        try {\r\n\r\n            if (stadiums && stadiums.length > 0) {\r\n                const stadiumPromises = stadiums.map(async (stadiumId) => {\r\n                    const response = await fetch(`http://localhost:3000/Stadium/getbyid/${stadiumId}`);\r\n                    if (!response.ok) {\r\n                       toast.error(`Failed to fetch stadium details for ID ${stadiumId}`);\r\n                    }\r\n                    return response.json();\r\n                });\r\n                const stadiumData = await Promise.all(stadiumPromises);\r\n                setStadiumsInfo(stadiumData);\r\n            }\r\n\r\n\r\n            if (referees && referees.length > 0) {\r\n                const refereePromises = referees.map(async (refereeId) => {\r\n                    const response = await fetch(`http://localhost:3000/User/getbyid/${refereeId}`);\r\n                    if (!response.ok) {\r\n                        toast.error(`Failed to fetch referee details for ID ${refereeId}`);\r\n                    }\r\n                    return response.json();\r\n                });\r\n                const refereeData = await Promise.all(refereePromises);\r\n                setRefereesInfo(refereeData);\r\n            }\r\n        } catch (error) {\r\n            toast.error('Error fetching stadium and referee details:', error);\r\n        }\r\n    };\r\n\r\n    if (stadiums && referees) {\r\n        fetchStadiumAndRefereeDetails();\r\n    }\r\n}, [stadiums, referees]);\r\nconst handleStartDateChange = (e) => {\r\n  const selectedDate = new Date(e.target.value);\r\n  setStartDate({\r\n    startDay: selectedDate.getDate(),\r\n    startMonth: selectedDate.getMonth() + 1,\r\n    startYear: selectedDate.getFullYear(),\r\n  });\r\n};\r\n\r\n\r\n    useEffect(() => {\r\n\r\n         const fetchMatchDetails = async () => {\r\n        try {\r\n\r\n          const team1Response = await fetch(`http://localhost:3000/Match/getbyid/${matchId}`);\r\n          if (!team1Response.ok) {\r\n            throw new Error('Failed to fetch team details');\r\n          }\r\n          const MatchData = await team1Response.json();\r\n          setMatch(MatchData);\r\n          const teamResponse = await fetch(`http://localhost:3000/Team/getbyid/${MatchData.team1}`);\r\n          if (!team1Response.ok) {\r\n            throw new Error('Failed to fetch team details');\r\n          }\r\n          const team1Data = await teamResponse.json();\r\n          setTeam1Name(team1Data.name);\r\n          setteam1Logo(team1Data.logo || getRandomDefaultLogo(team1Data.logo))\r\n\r\n          const team2Response = await fetch(`http://localhost:3000/Team/getbyid/${MatchData.team2}`);\r\n          if (!team2Response.ok) {\r\n            throw new Error('Failed to fetch team details');\r\n          }\r\n          const team2Data = await team2Response.json();\r\n          setTeam2Name(team2Data.name);\r\n          setteam2Logo(team2Data.logo || getRandomDefaultLogo(team2Data.logo));\r\n        }\r\n          catch{\r\n\r\n          } };\r\n          fetchMatchDetails();\r\n}, [matchId])\r\n\r\n    const getRandomDefaultLogo = (prevLogo) => {\r\n        let randomIndex = Math.floor(Math.random() * defaultLogos.length);\r\n\r\n        if (defaultLogos.length === 1) return defaultLogos[0];\r\n\r\n\r\n        while (defaultLogos[randomIndex] === prevLogo) {\r\n          randomIndex = Math.floor(Math.random() * defaultLogos.length);\r\n        }\r\n        return defaultLogos[randomIndex];\r\n      };\r\n    const [team1Name, setTeam1Name] = useState(null);\r\n    const [team2Name, setTeam2Name] = useState(null);\r\n    const [team2Logo, setteam2Logo] = useState(null);\r\n    const [team1Logo, setteam1Logo] = useState(null);\r\n\r\n\r\n    const [showPopup, setShowPopup] = useState(false);\r\n\r\n  const togglePopup = () => {\r\n    setShowPopup(!showPopup);\r\n  };\r\n\r\n\r\n /*   useEffect(() => {\r\n      const fetchTeamDetails = async () => {\r\n        try {\r\n          console.log(match);\r\n          const team1Response = await fetch(`http://localhost:3000/Team/getbyid/${match.team1}`);\r\n          if (!team1Response.ok) {\r\n            throw new Error('Failed to fetch team details');\r\n          }\r\n          const team1Data = await team1Response.json();\r\n          setTeam1Name(team1Data.name);\r\n          setteam1Logo(team1Data.logo || getRandomDefaultLogo(team1Data.logo));\r\n          // Fetch team details for team2\r\n          const team2Response = await fetch(`http://localhost:3000/Team/getbyid/${match.team2}`);\r\n          if (!team2Response.ok) {\r\n            throw new Error('Failed to fetch team details');\r\n          }\r\n          const team2Data = await team2Response.json();\r\n          setTeam2Name(team2Data.name);\r\n          setteam2Logo(team2Data.logo || getRandomDefaultLogo(team2Data.logo));\r\n        } catch (error) {\r\n          console.error('Error fetching team details:', error);\r\n        }\r\n      };\r\n      if(match){\r\n      fetchTeamDetails();}\r\n    }, [match]);\r\n\r\n\r\n*/\r\n\r\n\r\nconst onSubmit = async (formDataToSend) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/Match/update/${match._id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formDataToSend),\r\n    });\r\n    if (!response.ok) {\r\n        toast.error('Failed to update match details');\r\n    }\r\n\r\n  } catch (error) {\r\n    toast.error('Error updating match details:', error);\r\n  }\r\n};\r\n\r\n\r\nconst [selectedRefereeId, setSelectedRefereeId] = useState(null);\r\nconst [selectedstadiumId, setSelectedstadiumId] = useState(null);\r\nconst handleFormSubmit = (e) => {\r\n\r\n\r\n  const formDataToSend = {\r\n    startDay: parseInt(startDate.startDay),\r\n    startMonth: parseInt(startDate.startMonth),\r\n    startYear: parseInt(startDate.startYear),\r\n    startHour: parseInt(startHour),\r\n    startMinutes: parseInt(startMinutes),\r\n    stadium: selectedstadiumId,\r\n    _ref: selectedRefereeId,\r\n  };\r\n\r\n  onSubmit(formDataToSend);\r\n\r\n    toast.success(\"Match Details Updated Successfully\");\r\n\r\n};\r\n\r\n    return (\r\n        <Spring className={`${styles.container} ${styles[theme]} h-100`} type=\"slideUp\" index={index}>\r\n          {team1Name && team2Name && (\r\n            <div className=\"card-padded d-flex flex-column g-20\" style={{ paddingBottom: variant !== 'extended' ? 'var(--card-padding)' : 10 }}>\r\n              <div className=\"d-flex align-items-center justify-content-between p-relative\">\r\n                <img className=\"club-logo\" src={team1Logo} alt={team1Name} />\r\n\r\n                    <button className='btn' style={{backgroundColor:\"#FDCA40\",color:\"black\"}} onClick={togglePopup}> Match Details <br />\r\n                        <FaMapMarkerAlt style={{marginLeft:\"8px\"}} className=\"icon\"/></button>\r\n\r\n                <img className=\"club-logo\" src={team2Logo} alt={team2Name} />\r\n\r\n              </div>\r\n\r\n               {width >= 414 && (\r\n                <div className=\"d-flex justify-content-between g-30\">\r\n\r\n                      <div style={{ minWidth: 0 }}>\r\n                        <h3>{team1Name}</h3>\r\n                      </div>\r\n                      <div className=\"text-right\" style={{ minWidth: 0 }}>\r\n                        <h3>{team2Name}</h3>\r\n                      </div>\r\n                </div>\r\n\r\n\r\n                   )}\r\n\r\n\r\n                      <Popup  open={showPopup} onClose={togglePopup}>\r\n                      <h2 style={{margin : '22px',marginLeft:\"70px\"}}>Match Details</h2>\r\n                      <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                        <div className={styles.inputGroup}>\r\n                          <label>\r\n                            Referee:\r\n                            <select  className={classNames('field', { 'field--error': errors.referee })}\r\n                                     style={{backgroundColor : 'transparent',color:\"#A1A3A6\"}}\r\n                            onChange={(e) => setSelectedRefereeId(e.target.value)}>\r\n                              {refereeInfo && refereeInfo.map(referee => (\r\n                                <option key={referee._id} value={referee._id}>\r\n                                  {referee.fullname}\r\n                                </option>\r\n                              ))}\r\n                            </select>\r\n                          </label>\r\n                          {errors.referee && <span className=\"error-message\">Referee is required</span>}\r\n                        </div>\r\n                        <div className={styles.inputGroup}>\r\n                          <label>\r\n                            Stadium:\r\n                            <select className={classNames('field', { 'field--error': errors.stadium })}\r\n                                    style={{backgroundColor : \"transparent\",color:\"#A1A3A6\"}}\r\n                              onChange={(e) => setSelectedstadiumId(e.target.value)}>\r\n                              {StadiumInfo && StadiumInfo.map(stadium => (\r\n                                <option key={stadium._id} value={stadium._id}>\r\n                                  {stadium.name}\r\n                                </option>\r\n                              ))}\r\n                            </select>\r\n                          </label>\r\n                          {errors.stadium && <span className=\"error-message\">Stadium is required</span>}\r\n                        </div>\r\n                        <div className={styles.inputGroup}>\r\n                          <label style={{margin : '2px'}}>\r\n                            Match Day:\r\n                            <input\r\n                              type=\"date\"\r\n                             required\r\n                              className={classNames('field', { 'field--error': errors.matchDay })}\r\n                              onChange={handleStartDateChange}\r\n                            />\r\n                            {errors.matchDay && <span className=\"error-message\">Match Day is required</span>}\r\n                          </label >\r\n                        </div>\r\n                        <div className={styles.inputGroup}>\r\n                          <label style={{margin : '2px'}}>Match Start Hour:</label>\r\n                          <input\r\n                            type=\"number\"\r\n                          required\r\n                            className={classNames('field', { 'field--error': errors.matchStartHour })}\r\n                            min=\"0\"\r\n                            max=\"23\"\r\n                            value={startHour}\r\n                                    onChange={(e) => setStartHour(e.target.value)}\r\n                          />\r\n                          {errors.matchStartHour && <span className=\"error-message\">Match Start Hour is required</span>}\r\n                        </div>\r\n                        <div className={styles.inputGroup}>\r\n                          <label style={{margin : '2px'}}>Match Start Minute:</label>\r\n                          <input\r\n                            type=\"number\"\r\n                              required\r\n                                className={classNames('field', { 'field--error': errors.matchStartMinute })}\r\n                                min=\"0\"\r\n                                max=\"59\"\r\n                                value={startMinutes}\r\n                                        onChange={(e) => setStartMinutes(e.target.value)}\r\n                          />\r\n                          {errors.matchStartMinute && <span className=\"error-message\">Match Start Minute is required</span>}\r\n                        </div>\r\n                        <button style={{width : '100%', marginTop : '15px',backgroundColor:\"#FDCA40\",color:\"black\"}}    className=\"btn\" type=\"submit\">Confirm</button>\r\n                      </form>\r\n                    </Popup>\r\n            </div>\r\n          )}\r\n          {\r\n            variant === 'extended' && (\r\n              <div className=\"border-top\">\r\n                <Lineups wrapperClass={styles.field} isCompact />\r\n              </div>\r\n            )\r\n          }\r\n\r\n        </Spring>\r\n      )\r\n\r\n}\r\n\r\nGameCardBackOffice.propTypes = {\r\n    match: PropTypes.object,\r\n    index: PropTypes.number,\r\n    variant: PropTypes.oneOf(['basic', 'extended'])\r\n}\r\n\r\nexport default GameCardBackOffice;","import React, { useState, useEffect } from 'react';\r\nimport Spring from '@components/Spring';\r\nimport ScrollContainer from '@components/ScrollContainer';\r\nimport GameCardBackOffice from './GameCardBackOffice';\r\nimport styles from './styles.module.scss';\r\nconst MatchesPanel = ( { selectedTournamentId }) => {\r\n    const [matchestable, setMatches] = useState([]);\r\n    const [currentFixtureTableIndex, setCurrentFixtureTableIndex] = useState(0);\r\n    const [tournament ,settournament] = useState();\r\n    const [tournamentType , settournamentType] =useState();\r\n    const [rounds , setRounds] = useState([]);\r\n    const [groupMatches , setGroupMatches] =useState([]);\r\n    useEffect(() => {\r\n        const fetchTournament = async () => {\r\n            try {\r\n                const tournamentData = await fetch(`http://localhost:3000/Tournament/getbyid/${selectedTournamentId}`);\r\n                if (!tournamentData.ok) {\r\n                    throw new Error('Failed to fetch Tournament');\r\n                }\r\n                const data = await tournamentData.json();\r\n                settournament(data);\r\n                settournamentType(data.TournamentType); // Set the tournament type after fetching the tournament data\r\n            } catch (error) {\r\n                console.error('Error fetching tournament:', error);\r\n            }\r\n        };\r\n\r\n        if (selectedTournamentId) {\r\n            fetchTournament();\r\n        }\r\n    }, [selectedTournamentId]);\r\n    //http://localhost:3000/Tournament/getMatchesFromGroupsWithMatches\r\n    useEffect(() => {\r\n        const fetchMatchesForLeague = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/Tournament/fixtures/${tournament._id}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for League');\r\n                }\r\n                const data = await response.json();\r\n                setMatches(data.fixtures);\r\n            } catch (error) {\r\n                console.error('Error fetching matches for type 1:', error);\r\n            }\r\n        };\r\n\r\n        const fetchMatchesForKnockout = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/Tournament/getFixturesKnockout/${tournament._id}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for Knockout');\r\n                }\r\n                const data = await response.json();\r\n                setRounds(data.fixturesByRound);\r\n            } catch (error) {\r\n                console.error('Error fetching matches for type 2:', error);\r\n            }\r\n        };\r\n        const fetchMatchesForChampionship = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/Tournament/getMatchesFromGroupsWithMatches/${tournament._id}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch matches for Knockout');\r\n                }\r\n                const data = await response.json();\r\n                setGroupMatches(data.gamesByGroup);\r\n            } catch (error) {\r\n                console.error('Error fetching matches for type 2:', error);\r\n            }\r\n        };\r\n\r\n        if (selectedTournamentId && tournamentType) { // Check if tournamentType is set before fetching matches\r\n            if (tournamentType === 'League') {\r\n                fetchMatchesForLeague();\r\n            } else if (tournamentType === 'Knockout') {\r\n                fetchMatchesForKnockout();\r\n            }else if (tournamentType === 'Championship'){\r\n                fetchMatchesForChampionship();\r\n            }\r\n        }\r\n    }, [ tournamentType,selectedTournamentId]);\r\n\r\n    const switchToNextFixtureTable = () => {\r\n        if (tournamentType === 'League') {\r\n            setCurrentFixtureTableIndex((prevIndex) => (prevIndex + 1) % matchestable.length);\r\n        }else if (tournamentType === 'Knockout') {\r\n            setCurrentFixtureTableIndex((prevIndex) => (prevIndex + 1) % rounds.length);\r\n        }\r\n        else if (tournamentType === 'Championship') {\r\n            setCurrentFixtureTableIndex((prevIndex) => (prevIndex + 1) % groupMatches.length);\r\n        }\r\n    };\r\n\r\n    const switchToPreviousFixtureTable = () => {\r\n        if (tournamentType === 'League') {\r\n            setCurrentFixtureTableIndex((prevIndex) => (prevIndex - 1 + matchestable.length) % matchestable.length);\r\n        }else if (tournamentType === 'Knockout') {\r\n            setCurrentFixtureTableIndex((prevIndex) => (prevIndex - 1 + rounds.length) % rounds.length);\r\n        }\r\n        else if (tournamentType === 'Championship') {\r\n            setCurrentFixtureTableIndex((prevIndex) => (prevIndex - 1 + groupMatches.length) % groupMatches.length);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <Spring className=\"card d-flex flex-column card-padded\">\r\n            <div className=\"d-flex flex-column g-24\" style={{ paddingBottom: 24 }}>\r\n                <div className=\"switch-buttons\">\r\n                    <button style={{backgroundColor:\"#FDCA40\",color:\"black\"}} className='btn' onClick={switchToPreviousFixtureTable}>Previous</button>\r\n                    <button style={{backgroundColor:\"#FDCA40\",color:\"black\",marginLeft:\"950px\"}} className='btn' onClick={switchToNextFixtureTable}>Next</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex flex-column g-24\" style={{ paddingBottom: 24 }}>\r\n                <div className={styles.grid}>\r\n                    <div className=\"matchCardContainer-selector\">\r\n                        <ScrollContainer height={0}>\r\n                            <div className={`${styles.scroll_track} track d-flex flex-column g-20`}>\r\n                                <div className=\"game-container\">\r\n                                    {tournamentType === 'League' && (\r\n\r\n                                        <>\r\n                                            {matchestable[currentFixtureTableIndex]?.map((matchId, matchIndex) => (\r\n                                                <div key={matchIndex} className='matchCardContainer'>\r\n                                                    <GameCardBackOffice matchId={matchId} selectedTournamentId={selectedTournamentId} />\r\n                                                </div>\r\n                                            ))}\r\n                                        </>\r\n                                    )}\r\n                                    {tournamentType === 'Knockout' && (\r\n\r\n\r\n                                        <>\r\n                                            {rounds && rounds[currentFixtureTableIndex]?.map((matchId, matchIndex) => (\r\n                                                <div key={matchIndex} className='matchCardContainer'>\r\n                                                    <GameCardBackOffice matchId={matchId} selectedTournamentId={selectedTournamentId} />\r\n                                                </div>\r\n                                            ))}\r\n                                        </>\r\n                                    )}\r\n                                    {tournamentType === 'Championship' && (\r\n\r\n\r\n                                        <>\r\n                                            {groupMatches && groupMatches[currentFixtureTableIndex]?.map((matchId, matchIndex) => (\r\n                                                <div key={matchIndex} className='matchCardContainer'>\r\n                                                    <GameCardBackOffice matchId={matchId} selectedTournamentId={selectedTournamentId} />\r\n                                                </div>\r\n                                            ))}\r\n                                        </>\r\n                                    )}\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n                        </ScrollContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Spring>\r\n\r\n    );\r\n};\r\n\r\nexport default MatchesPanel;\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Spring from '@components/Spring'\r\n\r\nimport './styles.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport defaultLogo from \"../../../../assets/uefa.png\";\r\nimport {FaSearch} from \"react-icons/fa\";\r\n\r\nconst TournamentSelector = ({  onTournamentSelect }) => {\r\n  const [tournaments, setTournaments] = useState([]);\r\n    const [showSearch, setShowSearch] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const [search, setSearch] = useState('');\r\n  useEffect(() => {\r\n    const fetchTournaments = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/Tournament/UserTournaments`,{\r\n          method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch tournaments');\r\n        }\r\n        const data = await response.json();\r\n        setTournaments(data.tournaments);\r\n      } catch (error) {\r\n        console.error('Error fetching tournaments:', error);\r\n      }\r\n    };\r\n\r\n    fetchTournaments();\r\n  }, []);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', detectkeydown , true)\r\n\r\n  }, [])\r\n  const detectkeydown=(e) =>{\r\n\r\n    if(e.key ===\"/\"){\r\n      e.preventDefault();\r\n      inputRef.current.focus();\r\n      inputRef.current.value = '';\r\n    }\r\n  }\r\n\r\n    const handleIconClick = () => {\r\n        setShowSearch((prevShowSearch) => !prevShowSearch);\r\n        if (!showSearch && inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    };\r\n    const handleSearchChange = (e) => {\r\n        setSearch(e.target.value);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n    <Spring className=\"card d-flex flex-column g-16 card-padded\">\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          {showSearch ? (\r\n              <Form>\r\n                  <InputGroup className='my-3' style={{ paddingLeft: '30px' }}>\r\n                      <Form.Control\r\n                          ref={inputRef}\r\n                          value={search}\r\n                          onChange={handleSearchChange}\r\n                          onBlur={() => setShowSearch(false)}\r\n                          placeholder='Search..'\r\n                          style={{\r\n                              padding: '8px',\r\n                              borderRadius: '5px',\r\n                              border: '1px solid #FDCA40',\r\n                              boxShadow: 'none',\r\n                          }}\r\n                      />\r\n                  </InputGroup>\r\n              </Form>\r\n          ) : (\r\n              <h2>Tournaments</h2>\r\n          )}\r\n            <InputGroup.Text onClick={handleIconClick} style={{ cursor: 'pointer' }}>\r\n                <FaSearch style={{ color: \"#FBCB40\" }} />\r\n            </InputGroup.Text>\r\n        </div>\r\n\r\n\r\n\r\n\r\n    <div className=\"tournament-selector-container\">\r\n      {tournaments.filter((tournament) => {\r\n                return search.toLowerCase() === ''\r\n                  ? tournament\r\n                  :tournament.title && tournament.title.toLowerCase().includes(search);\r\n\r\n              })\r\n      .map(tournament => (\r\n\r\n        <div key={tournament._id} className=\"tournament-item\" onClick={() => onTournamentSelect(tournament._id)}>\r\n            <div className=\"tournament-content\">\r\n                <img src={tournament.logo || defaultLogo} alt=\"Tournament Logo\" className=\"tournament-logo\" />\r\n                <p className=\"tournament-title\">{tournament.title}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n      ))}\r\n    </div>\r\n\r\n  </Spring>\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default TournamentSelector;\r\n","// components\r\nimport PageHeader from '@layout/PageHeader';\r\nimport React, { useState } from 'react';\r\n\r\nimport MatchesPanel from '@widgets/TournamentWidgets/LeagueWidgets/backOffice/MatchPanel';\r\nimport TournamentSelector from '@widgets/TournamentWidgets/LeagueWidgets/backOffice/TournamentSelector';\r\n\r\nimport AppGrid from '@layout/AppGrid';\r\n\r\n\r\n\r\nconst LeagueInformationsBackOffice = () => {\r\n\r\n    const [selectedTournamentId, setSelectedTournamentId] = useState(null);\r\n    \r\n \r\n  const handleTournamentSelect = (tournamentId) => {\r\n    setSelectedTournamentId(tournamentId);\r\n  };\r\n  const widgets = {\r\n    segment_chart: <TournamentSelector onTournamentSelect={handleTournamentSelect} />,\r\n   \r\n    month_matches: <MatchesPanel selectedTournamentId={selectedTournamentId} />,\r\n   \r\n}\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Manage Your Tournaments\" />\r\n\r\n            \r\n          <AppGrid id=\"championships\" widgets={widgets} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LeagueInformationsBackOffice","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","matchId","index","variant","selectedTournamentId","width","useWindowSize","theme","useThemeProvider","defaultLogos","defaultLogo1","defaultLogo2","defaultLogo3","defaultLogo4","match","setMatch","useState","stadiums","setStadiums","referees","setReferees","StadiumInfo","setStadiumsInfo","refereeInfo","setRefereesInfo","startDate","setStartDate","day","month","year","startHour","setStartHour","startMinutes","setStartMinutes","handleSubmit","register","formState","errors","control","useForm","defaultValues","useEffect","async","StaduimsAndRefs","fetch","concat","ok","data","json","Staduims","toast","error","fetchStaduimsAndRefs","length","stadiumPromises","map","response","stadiumId","stadiumData","Promise","all","refereePromises","refereeId","refereeData","fetchStadiumAndRefereeDetails","team1Response","Error","MatchData","teamResponse","team1","team1Data","setTeam1Name","name","setteam1Logo","logo","getRandomDefaultLogo","team2Response","team2","team2Data","setTeam2Name","setteam2Logo","fetchMatchDetails","prevLogo","randomIndex","Math","floor","random","team1Name","team2Name","team2Logo","team1Logo","showPopup","setShowPopup","togglePopup","selectedRefereeId","setSelectedRefereeId","selectedstadiumId","setSelectedstadiumId","_jsxs","Spring","className","styles","container","type","children","style","paddingBottom","_jsx","src","alt","backgroundColor","color","onClick","FaMapMarkerAlt","marginLeft","minWidth","Popup","open","onClose","margin","onSubmit","e","_id","method","headers","body","JSON","stringify","formDataToSend","startDay","parseInt","startMonth","startYear","stadium","success","inputGroup","classNames","referee","onChange","target","value","fullname","required","matchDay","selectedDate","Date","getDate","getMonth","getFullYear","matchStartHour","min","max","matchStartMinute","marginTop","Lineups","wrapperClass","field","isCompact","_matchestable$current","_rounds$currentFixtur","_groupMatches$current","matchestable","setMatches","currentFixtureTableIndex","setCurrentFixtureTableIndex","tournament","settournament","tournamentType","settournamentType","rounds","setRounds","groupMatches","setGroupMatches","tournamentData","TournamentType","console","fetchTournament","fixtures","fetchMatchesForLeague","fixturesByRound","fetchMatchesForKnockout","gamesByGroup","fetchMatchesForChampionship","switchToPreviousFixtureTable","prevIndex","switchToNextFixtureTable","grid","ScrollContainer","height","scroll_track","_Fragment","matchIndex","GameCardBackOffice","onTournamentSelect","tournaments","setTournaments","showSearch","setShowSearch","search","setSearch","localStorage","getItem","fetchTournaments","inputRef","useRef","document","addEventListener","detectkeydown","key","preventDefault","current","focus","display","justifyContent","alignItems","Form","InputGroup","paddingLeft","Control","ref","onBlur","placeholder","padding","borderRadius","border","boxShadow","Text","handleIconClick","prevShowSearch","cursor","FaSearch","filter","toLowerCase","title","includes","defaultLogo","LeagueInformationsBackOffice","setSelectedTournamentId","widgets","segment_chart","TournamentSelector","tournamentId","month_matches","MatchesPanel","PageHeader","AppGrid","id","context","React","displayName","InputGroupText","bsPrefix","as","Component","props","useBootstrapPrefix","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}