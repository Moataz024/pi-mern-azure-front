{"version":3,"file":"static/js/3916.9b4eff4f.chunk.js","mappings":"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","sources":["../node_modules/is-electron/index.js","../node_modules/tesseract.js/src/Tesseract.js","../node_modules/tesseract.js/src/constants/OEM.js","../node_modules/tesseract.js/src/constants/PSM.js","../node_modules/tesseract.js/src/constants/defaultOptions.js","../node_modules/tesseract.js/src/constants/languages.js","../node_modules/tesseract.js/src/createJob.js","../node_modules/tesseract.js/src/createScheduler.js","../node_modules/tesseract.js/src/createWorker.js","../node_modules/tesseract.js/src/index.js","../node_modules/tesseract.js/src/utils/circularize.js","../node_modules/tesseract.js/src/utils/getEnvironment.js","../node_modules/tesseract.js/src/utils/getId.js","../node_modules/tesseract.js/src/utils/log.js","../node_modules/tesseract.js/src/utils/resolvePaths.js","../node_modules/tesseract.js/src/worker/browser/defaultOptions.js","../node_modules/tesseract.js/src/worker/browser/index.js","../node_modules/tesseract.js/src/worker/browser/loadImage.js","../node_modules/tesseract.js/src/worker/browser/onMessage.js","../node_modules/tesseract.js/src/worker/browser/send.js","../node_modules/tesseract.js/src/worker/browser/spawnWorker.js","../node_modules/tesseract.js/src/worker/browser/terminateWorker.js"],"sourcesContent":["// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n","const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = await createWorker(langs, 1, options);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = await createWorker('osd', 0, options);\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n","/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n","/*\n * PSM = Page Segmentation Mode\n */\nmodule.exports = {\n  OSD_ONLY: '0',\n  AUTO_OSD: '1',\n  AUTO_ONLY: '2',\n  AUTO: '3',\n  SINGLE_COLUMN: '4',\n  SINGLE_BLOCK_VERT_TEXT: '5',\n  SINGLE_BLOCK: '6',\n  SINGLE_LINE: '7',\n  SINGLE_WORD: '8',\n  CIRCLE_WORD: '9',\n  SINGLE_CHAR: '10',\n  SPARSE_TEXT: '11',\n  SPARSE_TEXT_OSD: '12',\n  RAW_LINE: '13',\n};\n","module.exports = {\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","/*\n * languages with existing tesseract traineddata\n * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n */\n\n/**\n * @typedef {object} Languages\n * @property {string} AFR Afrikaans\n * @property {string} AMH Amharic\n * @property {string} ARA Arabic\n * @property {string} ASM Assamese\n * @property {string} AZE Azerbaijani\n * @property {string} AZE_CYRL Azerbaijani - Cyrillic\n * @property {string} BEL Belarusian\n * @property {string} BEN Bengali\n * @property {string} BOD Tibetan\n * @property {string} BOS Bosnian\n * @property {string} BUL Bulgarian\n * @property {string} CAT Catalan; Valencian\n * @property {string} CEB Cebuano\n * @property {string} CES Czech\n * @property {string} CHI_SIM Chinese - Simplified\n * @property {string} CHI_TRA Chinese - Traditional\n * @property {string} CHR Cherokee\n * @property {string} CYM Welsh\n * @property {string} DAN Danish\n * @property {string} DEU German\n * @property {string} DZO Dzongkha\n * @property {string} ELL Greek, Modern (1453-)\n * @property {string} ENG English\n * @property {string} ENM English, Middle (1100-1500)\n * @property {string} EPO Esperanto\n * @property {string} EST Estonian\n * @property {string} EUS Basque\n * @property {string} FAS Persian\n * @property {string} FIN Finnish\n * @property {string} FRA French\n * @property {string} FRK German Fraktur\n * @property {string} FRM French, Middle (ca. 1400-1600)\n * @property {string} GLE Irish\n * @property {string} GLG Galician\n * @property {string} GRC Greek, Ancient (-1453)\n * @property {string} GUJ Gujarati\n * @property {string} HAT Haitian; Haitian Creole\n * @property {string} HEB Hebrew\n * @property {string} HIN Hindi\n * @property {string} HRV Croatian\n * @property {string} HUN Hungarian\n * @property {string} IKU Inuktitut\n * @property {string} IND Indonesian\n * @property {string} ISL Icelandic\n * @property {string} ITA Italian\n * @property {string} ITA_OLD Italian - Old\n * @property {string} JAV Javanese\n * @property {string} JPN Japanese\n * @property {string} KAN Kannada\n * @property {string} KAT Georgian\n * @property {string} KAT_OLD Georgian - Old\n * @property {string} KAZ Kazakh\n * @property {string} KHM Central Khmer\n * @property {string} KIR Kirghiz; Kyrgyz\n * @property {string} KOR Korean\n * @property {string} KUR Kurdish\n * @property {string} LAO Lao\n * @property {string} LAT Latin\n * @property {string} LAV Latvian\n * @property {string} LIT Lithuanian\n * @property {string} MAL Malayalam\n * @property {string} MAR Marathi\n * @property {string} MKD Macedonian\n * @property {string} MLT Maltese\n * @property {string} MSA Malay\n * @property {string} MYA Burmese\n * @property {string} NEP Nepali\n * @property {string} NLD Dutch; Flemish\n * @property {string} NOR Norwegian\n * @property {string} ORI Oriya\n * @property {string} PAN Panjabi; Punjabi\n * @property {string} POL Polish\n * @property {string} POR Portuguese\n * @property {string} PUS Pushto; Pashto\n * @property {string} RON Romanian; Moldavian; Moldovan\n * @property {string} RUS Russian\n * @property {string} SAN Sanskrit\n * @property {string} SIN Sinhala; Sinhalese\n * @property {string} SLK Slovak\n * @property {string} SLV Slovenian\n * @property {string} SPA Spanish; Castilian\n * @property {string} SPA_OLD Spanish; Castilian - Old\n * @property {string} SQI Albanian\n * @property {string} SRP Serbian\n * @property {string} SRP_LATN Serbian - Latin\n * @property {string} SWA Swahili\n * @property {string} SWE Swedish\n * @property {string} SYR Syriac\n * @property {string} TAM Tamil\n * @property {string} TEL Telugu\n * @property {string} TGK Tajik\n * @property {string} TGL Tagalog\n * @property {string} THA Thai\n * @property {string} TIR Tigrinya\n * @property {string} TUR Turkish\n * @property {string} UIG Uighur; Uyghur\n * @property {string} UKR Ukrainian\n * @property {string} URD Urdu\n * @property {string} UZB Uzbek\n * @property {string} UZB_CYRL Uzbek - Cyrillic\n * @property {string} VIE Vietnamese\n * @property {string} YID Yiddish\n */\n\n/**\n  * @type {Languages}\n  */\nmodule.exports = {\n  AFR: 'afr',\n  AMH: 'amh',\n  ARA: 'ara',\n  ASM: 'asm',\n  AZE: 'aze',\n  AZE_CYRL: 'aze_cyrl',\n  BEL: 'bel',\n  BEN: 'ben',\n  BOD: 'bod',\n  BOS: 'bos',\n  BUL: 'bul',\n  CAT: 'cat',\n  CEB: 'ceb',\n  CES: 'ces',\n  CHI_SIM: 'chi_sim',\n  CHI_TRA: 'chi_tra',\n  CHR: 'chr',\n  CYM: 'cym',\n  DAN: 'dan',\n  DEU: 'deu',\n  DZO: 'dzo',\n  ELL: 'ell',\n  ENG: 'eng',\n  ENM: 'enm',\n  EPO: 'epo',\n  EST: 'est',\n  EUS: 'eus',\n  FAS: 'fas',\n  FIN: 'fin',\n  FRA: 'fra',\n  FRK: 'frk',\n  FRM: 'frm',\n  GLE: 'gle',\n  GLG: 'glg',\n  GRC: 'grc',\n  GUJ: 'guj',\n  HAT: 'hat',\n  HEB: 'heb',\n  HIN: 'hin',\n  HRV: 'hrv',\n  HUN: 'hun',\n  IKU: 'iku',\n  IND: 'ind',\n  ISL: 'isl',\n  ITA: 'ita',\n  ITA_OLD: 'ita_old',\n  JAV: 'jav',\n  JPN: 'jpn',\n  KAN: 'kan',\n  KAT: 'kat',\n  KAT_OLD: 'kat_old',\n  KAZ: 'kaz',\n  KHM: 'khm',\n  KIR: 'kir',\n  KOR: 'kor',\n  KUR: 'kur',\n  LAO: 'lao',\n  LAT: 'lat',\n  LAV: 'lav',\n  LIT: 'lit',\n  MAL: 'mal',\n  MAR: 'mar',\n  MKD: 'mkd',\n  MLT: 'mlt',\n  MSA: 'msa',\n  MYA: 'mya',\n  NEP: 'nep',\n  NLD: 'nld',\n  NOR: 'nor',\n  ORI: 'ori',\n  PAN: 'pan',\n  POL: 'pol',\n  POR: 'por',\n  PUS: 'pus',\n  RON: 'ron',\n  RUS: 'rus',\n  SAN: 'san',\n  SIN: 'sin',\n  SLK: 'slk',\n  SLV: 'slv',\n  SPA: 'spa',\n  SPA_OLD: 'spa_old',\n  SQI: 'sqi',\n  SRP: 'srp',\n  SRP_LATN: 'srp_latn',\n  SWA: 'swa',\n  SWE: 'swe',\n  SYR: 'syr',\n  TAM: 'tam',\n  TEL: 'tel',\n  TGK: 'tgk',\n  TGL: 'tgl',\n  THA: 'tha',\n  TIR: 'tir',\n  TUR: 'tur',\n  UIG: 'uig',\n  UKR: 'ukr',\n  URD: 'urd',\n  UZB: 'uzb',\n  UZB_CYRL: 'uzb_cyrl',\n  VIE: 'vie',\n  YID: 'yid',\n};\n","const getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","const createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n","const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (promiseId, res) => {\n    resolves[promiseId] = res;\n  };\n\n  const setReject = (promiseId, rej) => {\n    rejects[promiseId] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      // Using both `action` and `jobId` in case user provides non-unique `jobId`.\n      const promiseId = `${action}-${jobId}`;\n      setResolve(promiseId, resolve);\n      setReject(promiseId, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = () => (\n    console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)')\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initialize = () => (\n    console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)')\n  );\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    const promiseId = `${action}-${jobId}`;\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[promiseId]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[promiseId](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n","/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nrequire('regenerator-runtime/runtime');\nconst createScheduler = require('./createScheduler');\nconst createWorker = require('./createWorker');\nconst Tesseract = require('./Tesseract');\nconst languages = require('./constants/languages');\nconst OEM = require('./constants/OEM');\nconst PSM = require('./constants/PSM');\nconst { setLogging } = require('./utils/log');\n\nmodule.exports = {\n  languages,\n  OEM,\n  PSM,\n  createScheduler,\n  createWorker,\n  setLogging,\n  ...Tesseract,\n};\n","/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n","const isElectron = require('is-electron');\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (typeof WorkerGlobalScope !== 'undefined') {\n    env.type = 'webworker';\n  } else if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof document === 'object') {\n    env.type = 'browser';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","const isBrowser = require('./getEnvironment')('type') === 'browser';\n\nconst resolveURL = isBrowser ? s => (new URL(s, window.location.href)).href : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (options[key]) {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","const version = require('../../../package.json').version;\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: `https://cdn.jsdelivr.net/npm/tesseract.js@v${version}/dist/worker.min.js`,\n};\n","/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(image);\n      data = await resp.arrayBuffer();\n    }\n  } else if (typeof HTMLElement !== 'undefined' && image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas) {\n    const blob = await image.convertToBlob();\n    data = await readFromBlobOrFile(blob);\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n","module.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n","/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n","/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function terminate worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n"],"names":["module","exports","window","process","type","versions","electron","navigator","userAgent","indexOf","createWorker","require","recognize","async","image","langs","options","worker","finally","terminate","detect","TESSERACT_ONLY","LSTM_ONLY","TESSERACT_LSTM_COMBINED","DEFAULT","OSD_ONLY","AUTO_OSD","AUTO_ONLY","AUTO","SINGLE_COLUMN","SINGLE_BLOCK_VERT_TEXT","SINGLE_BLOCK","SINGLE_LINE","SINGLE_WORD","CIRCLE_WORD","SINGLE_CHAR","SPARSE_TEXT","SPARSE_TEXT_OSD","RAW_LINE","workerBlobURL","logger","AFR","AMH","ARA","ASM","AZE","AZE_CYRL","BEL","BEN","BOD","BOS","BUL","CAT","CEB","CES","CHI_SIM","CHI_TRA","CHR","CYM","DAN","DEU","DZO","ELL","ENG","ENM","EPO","EST","EUS","FAS","FIN","FRA","FRK","FRM","GLE","GLG","GRC","GUJ","HAT","HEB","HIN","HRV","HUN","IKU","IND","ISL","ITA","ITA_OLD","JAV","JPN","KAN","KAT","KAT_OLD","KAZ","KHM","KIR","KOR","KUR","LAO","LAT","LAV","LIT","MAL","MAR","MKD","MLT","MSA","MYA","NEP","NLD","NOR","ORI","PAN","POL","POR","PUS","RON","RUS","SAN","SIN","SLK","SLV","SPA","SPA_OLD","SQI","SRP","SRP_LATN","SWA","SWE","SYR","TAM","TEL","TGK","TGL","THA","TIR","TUR","UIG","UKR","URD","UZB","UZB_CYRL","VIE","YID","getId","jobCounter","_ref","id","_id","action","payload","createJob","log","schedulerCounter","workers","runningWorkers","jobQueue","getNumWorkers","Object","keys","length","dequeue","wIds","i","queue","Promise","resolve","reject","job","push","shift","w","apply","this","err","concat","addWorker","addJob","Error","_len","arguments","Array","_key","forEach","wid","getQueueLen","resolvePaths","circularize","OEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","undefined","oem","_options","config","errorHandler","resolves","rejects","currentLangs","split","currentOem","currentConfig","lstmOnlyCore","includes","legacyCore","workerResReject","workerResResolve","workerRes","onerror","event","message","setResolve","promiseId","res","setReject","rej","startJob","jobId","workerId","loadLanguageInternal","_langs","langPath","dataPath","cachePath","cacheMethod","gzip","lstmOnly","legacyLang","initializeInternal","_oem","_config","_ref2","status","data","d","from","userJobId","resolveObj","load","console","warn","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","initialize","reinitialize","filter","x","then","setParameters","params","opts","output","blocks","hocr","tsv","getPDF","title","textonly","corePath","logging","catch","createScheduler","Tesseract","languages","PSM","setLogging","page","paragraphs","lines","words","symbols","block","paragraph","line","word","sym","isElectron","key","env","WorkerGlobalScope","document","prefix","cnt","Math","random","toString","slice","_logging","_this","resolveURL","s","URL","location","href","version","workerPath","readFromBlobOrFile","blob","fileReader","FileReader","onload","result","target","error","code","readAsArrayBuffer","test","atob","map","c","charCodeAt","resp","fetch","arrayBuffer","HTMLElement","tagName","src","poster","toBlob","OffscreenCanvas","convertToBlob","File","Blob","Uint8Array","handler","onmessage","packet","postMessage","Worker","createObjectURL"],"sourceRoot":""}