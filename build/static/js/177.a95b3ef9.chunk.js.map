{"version":3,"file":"static/js/177.a95b3ef9.chunk.js","mappings":"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","sources":["pages/SignUp.jsx","widgets/SignUpForm.jsx","hooks/useSignUp.js"],"sourcesContent":["// components\r\nimport AuthLayout from '@components/AuthLayout';\r\nimport SignUpForm from '@widgets/SignUpForm';\r\n\r\nconst SignUp = () => {\r\n    return (\r\n        <AuthLayout title=\"Sign Up\">\r\n            <SignUpForm />\r\n        </AuthLayout>\r\n    );\r\n}\r\n\r\nexport default SignUp","// components\r\nimport PasswordInput from '@components/PasswordInput';\r\nimport Spring from '@components/Spring';\r\nimport {Fragment} from 'react';\r\n\r\n// hooks\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport {useSignup} from \"@hooks/useSignUp\";\r\n// utils\r\nimport classNames from 'classnames';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst SignUpForm = ({standalone = true}) => {\r\n\r\n    const {signup,error,isLoading} = useSignup();\r\n\r\n    const {register, handleSubmit, formState: {errors}, control, watch} = useForm({\r\n        defaultValues: {\r\n            fullname: '',\r\n            lastName: '',\r\n            email: '',\r\n            age : '',\r\n            phone : '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        }\r\n    });\r\n\r\n    const Wrapper = standalone ? Fragment : Spring;\r\n    const wrapperProps = standalone ? {} : {className: 'card card-padded'};\r\n\r\n    //Function on submit !\r\n    const onSubmit = async (data) => {\r\n        await signup(data.email, data.password,data.phone,data.age,data.fullname)\r\n    }\r\n\r\n    return (\r\n        <Wrapper {...wrapperProps}>\r\n            <div className=\"d-flex flex-column g-4\">\r\n                <h3>Create new account</h3>\r\n                <p className=\"text-12\">Fill out the form below to create a new account</p>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"d-flex flex-column g-20\" style={{margin: '20px 0 30px'}}>\r\n                    <input className={classNames('field', {'field--error': errors.fullname})}\r\n                           type=\"text\"\r\n                           placeholder=\"Full Name\"\r\n                           {...register('fullname', {required: true})}/>\r\n                   <input className={classNames('field', {'field--error': errors.age})}\r\n                           type=\"text\"\r\n                           placeholder=\"Age\"\r\n                           {...register('age', {required: true})}/>\r\n                   <input className={classNames('field', {'field--error': errors.phone})}\r\n                           type=\"text\"\r\n                           placeholder=\"Phone number\"\r\n                           {...register('phone', {required: true})}/>\r\n\r\n\r\n\r\n                    <input className={classNames('field', {'field--error': errors.email})}\r\n                           type=\"text\"\r\n                           placeholder=\"E-mail\"\r\n                           {...register('email', {required: true, pattern: /^\\S+@\\S+$/i})}/>\r\n                           \r\n                    <Controller control={control}\r\n                                name=\"password\"\r\n                                rules={{required: true}}\r\n                                render={({field: {ref, onChange, value}, fieldState: {error}}) => (\r\n                                    <PasswordInput\r\n                                        className={classNames('field', {'field--error': error})}\r\n                                        value={value}\r\n                                        onChange={e => onChange(e.target.value)}\r\n                                        placeholder=\"Password\"\r\n                                        innerRef={ref}/>\r\n                                )}\r\n                    />\r\n                    <Controller control={control}\r\n                                name=\"passwordConfirm\"\r\n                                rules={{\r\n                                    required: true,\r\n                                    validate: value => value === watch('password')\r\n                                }}\r\n                                render={({field: {ref, onChange, value}, fieldState: {error}}) => (\r\n                                    <PasswordInput\r\n                                        className={classNames('field', {'field--error': error})}\r\n                                        value={value}\r\n                                        onChange={e => onChange(e.target.value)}\r\n                                        placeholder=\"Confirm password\"\r\n                                        innerRef={ref}/>\r\n                                )}\r\n                    />\r\n                </div>\r\n                    <div style={{\r\n                        justifyContent:\"center\",\r\n                        textAlign:\"center\",\r\n                        alignContent:\"center\",\r\n                    }}>\r\n                        <button disabled={isLoading} type=\"submit\" className=\"btn w-100\">Create account</button>\r\n                    </div>\r\n                    {error && <div className=\"__progress-bar--error\" >{error}</div>}\r\n                    <br/><br/>\r\n                <div style={{\r\n                    justifyContent:\"center\",\r\n                    textAlign:\"center\",\r\n                    alignContent:\"center\"\r\n                }}>\r\n                    <NavLink to=\"/login\" >\r\n                        <button disabled={isLoading} className=\"text-button text-button--sm\">\r\n                            Already have an account?<b> Sign in</b>\r\n                        </button>\r\n                    </NavLink>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default SignUpForm","import { useState } from 'react'\r\nimport { useAuthContext } from './useAuthContext'\r\nimport {toast} from \"react-toastify\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nexport const useSignup = () => {\r\n    const [error, setError] = useState('')\r\n    const [isLoading, setIsLoading] = useState(null)\r\n    const { dispatch } = useAuthContext()\r\n    const navigate = useNavigate();\r\n\r\n    const signup = async (email, password,phone,age,fullname) => {\r\n        setIsLoading(true)\r\n        setError('')\r\n\r\n        const response = await fetch('http://localhost:3000/User/signup', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({ email, password,phone,age,fullname })\r\n        })\r\n        const json = await response.json()\r\n\r\n        if (json.error) {\r\n            setError(json.error)\r\n            setIsLoading(false)\r\n            toast.error(json.error);\r\n        }\r\n        if (!json.error) {\r\n            localStorage.setItem('token', json.accessToken)\r\n\r\n            const u = jwtDecode(json.accessToken.toString());\r\n            const USER = u.user\r\n            console.log(USER)\r\n            dispatch({type: 'LOGIN', payload: USER})\r\n\r\n            setIsLoading(false)\r\n            toast.success(`Account created! Please check your email ${json.email} to confirm your account.`)\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    return { signup, isLoading, error }\r\n}"],"names":["SignUp","_jsx","AuthLayout","title","children","SignUpForm","_ref","standalone","signup","error","isLoading","useSignup","setError","useState","setIsLoading","dispatch","useAuthContext","navigate","useNavigate","async","email","password","phone","age","fullname","response","fetch","method","headers","body","JSON","stringify","json","toast","localStorage","setItem","accessToken","USER","jwtDecode","toString","user","console","log","type","payload","success","concat","register","handleSubmit","formState","errors","control","watch","useForm","defaultValues","lastName","passwordConfirm","Wrapper","Fragment","Spring","wrapperProps","className","_jsxs","onSubmit","data","style","margin","classNames","placeholder","required","pattern","Controller","name","rules","render","_ref2","field","ref","onChange","value","fieldState","PasswordInput","e","target","innerRef","validate","_ref3","justifyContent","textAlign","alignContent","disabled","NavLink","to"],"sourceRoot":""}